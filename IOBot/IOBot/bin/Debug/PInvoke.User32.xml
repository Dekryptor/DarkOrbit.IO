<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PInvoke.User32</name>
    </assembly>
    <members>
        <member name="T:PInvoke.User32">
            <content>
            Contains the <see cref="T:PInvoke.User32.InputType"/> nested type.
            </content>
            <content>
            Contains the <see cref="T:PInvoke.User32.KEYEVENTF"/> nested type.
            </content>
            <content>
            Contains the <see cref="T:PInvoke.User32.MOUSEEVENTF"/> nested type.
            </content>
            <content>
            Contains the <see cref="T:PInvoke.User32.MOUSEINPUT"/> nested type.
            </content>
            <content>
            Contains the <see cref="T:PInvoke.User32.KEYBDINPUT"/> nested type.
            </content>
            <content>
            Contains the <see cref="T:PInvoke.User32.HARDWAREINPUT"/> nested type.
            </content>
            <content>
            Contains the <see cref="T:PInvoke.User32.INPUT"/> nested type.
            </content>
            <content>
            Contains the <see cref="T:PInvoke.User32.QueueStatusFlags"/> nested type.
            </content>
            <content>
            Contains the <see cref="T:PInvoke.User32.PeekMessageParams"/> nested type.
            </content>
            <content>
            Contains the <see cref="T:PInvoke.User32.SysCommands"/> nested type.
            </content>
            <content>
            Contains the virtual-key code constants.
            </content>
            <content>
            Contains the Keyboard scan code constants.
            </content>
            <content>
            Contains the Windows Messages constants.
            </content>
            <content>
            Contains the <see cref="T:PInvoke.User32.MessageBeepType"/> nested type.
            </content>
            <content>
            Contains the <see cref="T:PInvoke.User32.FlashWindowFlags"/> nested type.
            </content>
            <content>Contains the <see cref="T:PInvoke.User32.FLASHWINFO" /> nested type.</content>
            <content>
            Contains the <see cref="T:PInvoke.User32.LookupIconIdFromDirectoryExFlags"/> nested type.
            </content>
            <content>
            Contains the <see cref="T:PInvoke.User32.MapVirtualKeyTranslation"/> nested type.
            </content>
            <content>
            Contains the <see cref="T:PInvoke.User32.MenuItemFlags"/> nested type.
            </content>
            <content>
            Contains the <see cref="T:PInvoke.User32.MENUITEMINFO"/> nested type.
            </content>
            <content>
            Contains the <see cref="T:PInvoke.User32.MenuItemState"/> nested type.
            </content>
            <content>
            Contains the <see cref="T:PInvoke.User32.MenuItemType"/> nested type.
            </content>
            <content>
            Contains the <see cref="T:PInvoke.User32.MenuMembersMask"/> nested type.
            </content>
            <content>
            Contains the <see cref="T:PInvoke.User32.SafeDCHandle"/> nested type.
            </content>
            <content>
            Contains the <see cref="T:PInvoke.User32.SafeHookHandle"/> nested type.
            </content>
            <content>
            Contains the <see cref="T:PInvoke.User32.GetAncestorFlags"/> nested type.
            </content>
            <content>
            Contains the <see cref="T:PInvoke.User32.SetWindowLongFlags"/> nested type.
            </content>
            <content>
            Contains the <see cref="M:PInvoke.User32.PrintWindow(System.IntPtr,System.IntPtr,PInvoke.User32.PrintWindowFlags)"/> nested type.
            </content>
            <content>
            Contains the <see cref="T:PInvoke.User32.SetWindowPosFlags"/> nested type.
            </content>
            <content>
            Contains the <see cref="T:PInvoke.User32.WindowLongIndexFlags"/> nested type.
            </content>
            <content>Contains the <see cref="T:PInvoke.User32.WindowsHookType" /> nested type.</content>
            <content>
            Contains the <see cref="T:PInvoke.User32.WindowShowStyle"/> nested type.
            </content>
            <summary>
            Exported functions from the User32.dll Windows library.
            </summary>
            <content>
            Methods and nested types that are not strictly P/Invokes but provide
            a slightly higher level of functionality to ease calling into native code.
            </content>
            <content>
            Contains the <see cref = "T:PInvoke.User32.MOUSEINPUT"/> nested type.
            </content>
            <content>
            Contains the <see cref = "T:PInvoke.User32.KEYBDINPUT"/> nested type.
            </content>
            <summary>
            Exported functions from the User32.dll Windows library.
            </summary>
            <content>
            Methods and nested types that are not strictly P/Invokes but provide
            a slightly higher level of functionality to ease calling into native code.
            </content>
        </member>
        <member name="T:PInvoke.User32.InputType">
            <summary>
            The type of the input event used by <see cref="F:PInvoke.User32.INPUT.type" />.
            </summary>
        </member>
        <member name="F:PInvoke.User32.InputType.INPUT_MOUSE">
            <summary>
            The event is a mouse event. Use the <see cref="F:PInvoke.User32.INPUT.mi"/> structure of the union.
            </summary>
        </member>
        <member name="F:PInvoke.User32.InputType.INPUT_KEYBOARD">
            <summary>
            The event is a keyboard event. Use the <see cref="F:PInvoke.User32.INPUT.ki"/> structure of the union.
            </summary>
        </member>
        <member name="F:PInvoke.User32.InputType.INPUT_HARDWARE">
            <summary>
            The event is a hardware event. Use the <see cref="F:PInvoke.User32.INPUT.hi"/> structure of the union.
            </summary>
        </member>
        <member name="T:PInvoke.User32.KEYEVENTF">
            <summary>
            Specifies various aspects of a keystroke. This member can be certain combinations of the following values.
            </summary>
        </member>
        <member name="F:PInvoke.User32.KEYEVENTF.KEYEVENTF_EXTENDED_KEY">
            <summary>
            If specified, the scan code was preceded by a prefix byte that has the value 0xE0 (224).
            </summary>
        </member>
        <member name="F:PInvoke.User32.KEYEVENTF.KEYEVENTF_KEYUP">
            <summary>
            If specified, the key is being released. If not specified, the key is being pressed.
            </summary>
        </member>
        <member name="F:PInvoke.User32.KEYEVENTF.KEYEVENTF_SCANCODE">
            <summary>
            If specified, <see cref="F:PInvoke.User32.KEYBDINPUT.wScan"/> identifies the key and <see cref="F:PInvoke.User32.KEYBDINPUT.wVk"/> is ignored.
            </summary>
        </member>
        <member name="F:PInvoke.User32.KEYEVENTF.KEYEVENTF_UNICODE">
            <summary>
            If specified, the system synthesizes a <see cref="F:PInvoke.User32.VirtualKey.VK_PACKET"/> keystroke.
            The <see cref="F:PInvoke.User32.KEYBDINPUT.wVk"/> parameter must be zero.
            This flag can only be combined with the <see cref="F:PInvoke.User32.KEYEVENTF.KEYEVENTF_KEYUP"/> flag.
            For more information, see the Remarks section.
            </summary>
        </member>
        <member name="T:PInvoke.User32.MOUSEEVENTF">
            <summary>
            A set of bit flags that specify various aspects of mouse motion and button clicks. The bits in this member can be any reasonable combination of the following values.
            </summary>
            <remarks>
            The bit flags that specify mouse button status are set to indicate changes in status, not ongoing conditions.
            For example, if the left mouse button is pressed and held down, MOUSEEVENTF_LEFTDOWN is set when the left button is first pressed, but not for subsequent motions.
            Similarly, MOUSEEVENTF_LEFTUP is set only when the button is first released.
            You cannot specify both the MOUSEEVENTF_WHEEL flag and either MOUSEEVENTF_XDOWN or MOUSEEVENTF_XUP flags simultaneously in the <see cref="F:PInvoke.User32.MOUSEINPUT.dwFlags"/> parameter,
            because they both require use of the <see cref="F:PInvoke.User32.MOUSEINPUT.mouseData" /> field.
            </remarks>
        </member>
        <member name="T:PInvoke.User32.MOUSEINPUT">
            <summary>
            Contains information about a simulated mouse event.
            </summary>
        </member>
        <member name="F:PInvoke.User32.MOUSEINPUT.dx">
            <summary>
            The absolute position of the mouse, or the amount of motion since the last mouse event was generated, depending on the value of the dwFlags member. Absolute data is specified as the x coordinate of the mouse; relative data is specified as the number of pixels moved.
            </summary>
        </member>
        <member name="F:PInvoke.User32.MOUSEINPUT.dy">
            <summary>
            The absolute position of the mouse, or the amount of motion since the last mouse event was generated, depending on the value of the dwFlags member. Absolute data is specified as the y coordinate of the mouse; relative data is specified as the number of pixels moved.
            </summary>
        </member>
        <member name="F:PInvoke.User32.MOUSEINPUT.mouseData">
            <summary>
            If dwFlags contains <see cref="F:PInvoke.User32.MOUSEEVENTF.MOUSEEVENTF_WHEEL"/>, then <see cref="F:PInvoke.User32.MOUSEINPUT.mouseData"/> specifies the amount of wheel movement. A positive value indicates that the wheel was rotated forward, away from the user; a negative value indicates that the wheel was rotated backward, toward the user. One wheel click is defined as <see cref="F:PInvoke.User32.WHEEL_DELTA"/>, which is 120.
            If dwFlags does not contain <see cref="F:PInvoke.User32.MOUSEEVENTF.MOUSEEVENTF_WHEEL"/>, <see cref="F:PInvoke.User32.MOUSEEVENTF.MOUSEEVENTF_XDOWN"/>, or <see cref="F:PInvoke.User32.MOUSEEVENTF.MOUSEEVENTF_XUP"/>, then mouseData should be zero.
            If dwFlags contains <see cref="F:PInvoke.User32.MOUSEEVENTF.MOUSEEVENTF_XDOWN"/> or <see cref="F:PInvoke.User32.MOUSEEVENTF.MOUSEEVENTF_XUP"/>, then mouseData specifies which X buttons were pressed or released.
            </summary>
        </member>
        <member name="F:PInvoke.User32.MOUSEINPUT.dwFlags">
            <summary>
            A set of bit flags that specify various aspects of mouse motion and button clicks. The bits in this member can be any reasonable combination of the following values.
            See MSDN docs for more info.
            </summary>
        </member>
        <member name="F:PInvoke.User32.MOUSEINPUT.time">
            <summary>
            The time stamp for the event, in milliseconds. If this parameter is 0, the system will provide its own time stamp.
            </summary>
        </member>
        <member name="F:PInvoke.User32.MOUSEINPUT.dwExtraInfo">
            <summary>
            An additional value associated with the mouse event. An application calls GetMessageExtraInfo to obtain this extra information.
            </summary>
        </member>
        <member name="P:PInvoke.User32.MOUSEINPUT.dwExtraInfo_IntPtr">
            <summary>
            An additional value associated with the mouse event. An application calls GetMessageExtraInfo to obtain this extra information.
            </summary>
        </member>
        <member name="T:PInvoke.User32.KEYBDINPUT">
            <summary>
            Contains information about a simulated keyboard event.
            </summary>
        </member>
        <member name="F:PInvoke.User32.KEYBDINPUT.wVk">
            <summary>
            A virtual-key code. The code must be a value in the range 1 to 254. If the dwFlags member specifies KEYEVENTF_UNICODE, wVk must be 0.
            </summary>
        </member>
        <member name="F:PInvoke.User32.KEYBDINPUT.wScan">
            <summary>
            A hardware scan code for the key.
            If <see cref="F:PInvoke.User32.KEYBDINPUT.dwFlags"/> specifies <see cref="F:PInvoke.User32.KEYEVENTF.KEYEVENTF_UNICODE"/>,
            <see cref="F:PInvoke.User32.KEYBDINPUT.wScan"/> specifies a Unicode character which is to be sent to the foreground application.
            </summary>
        </member>
        <member name="F:PInvoke.User32.KEYBDINPUT.dwFlags">
            <summary>
            Specifies various aspects of a keystroke.
            This member can be certain combinations of the following values.
            </summary>
        </member>
        <member name="F:PInvoke.User32.KEYBDINPUT.time">
            <summary>
            The time stamp for the event, in milliseconds. If this parameter is zero, the system will provide its own time stamp.
            </summary>
        </member>
        <member name="F:PInvoke.User32.KEYBDINPUT.dwExtraInfo">
            <summary>
            An additional value associated with the keystroke.
            Use the GetMessageExtraInfo function to obtain this information.
            </summary>
        </member>
        <member name="P:PInvoke.User32.KEYBDINPUT.dwExtraInfo_IntPtr">
            <summary>
            An additional value associated with the keystroke.
            Use the GetMessageExtraInfo function to obtain this information.
            </summary>
        </member>
        <member name="T:PInvoke.User32.HARDWAREINPUT">
            <summary>
            Contains information about a simulated message generated by an input device other than a keyboard or mouse.
            </summary>
        </member>
        <member name="F:PInvoke.User32.HARDWAREINPUT.uMsg">
            <summary>
            The message generated by the input hardware.
            </summary>
        </member>
        <member name="F:PInvoke.User32.HARDWAREINPUT.wParamL">
            <summary>
            The low-order word of the lParam parameter for <see cref="F:PInvoke.User32.HARDWAREINPUT.uMsg"/>.
            </summary>
        </member>
        <member name="F:PInvoke.User32.HARDWAREINPUT.wParamH">
            <summary>
            The high-order word of the lParam parameter for <see cref="F:PInvoke.User32.HARDWAREINPUT.uMsg"/>.
            </summary>
        </member>
        <member name="T:PInvoke.User32.INPUT">
            <summary>
            Used by <see cref="M:PInvoke.User32.SendInput(System.Int32,PInvoke.User32.INPUT*,System.Int32)"/> to store information for synthesizing input events such as keystrokes, mouse movement, and mouse clicks.
            </summary>
        </member>
        <member name="F:PInvoke.User32.INPUT.type">
            <summary>
            The type of the input event.
            </summary>
        </member>
        <member name="F:PInvoke.User32.INPUT.mi">
            <summary>
            The information about a simulated mouse event.
            This field shares memory with the <see cref="F:PInvoke.User32.INPUT.ki"/> and <see cref="F:PInvoke.User32.INPUT.hi"/> fields.
            </summary>
        </member>
        <member name="F:PInvoke.User32.INPUT.ki">
            <summary>
            The information about a simulated keyboard event.
            This field shares memory with the <see cref="F:PInvoke.User32.INPUT.mi"/> and <see cref="F:PInvoke.User32.INPUT.hi"/> fields.
            </summary>
        </member>
        <member name="F:PInvoke.User32.INPUT.hi">
            <summary>
            The information about a simulated hardware event.
            This field shares memory with the <see cref="F:PInvoke.User32.INPUT.mi"/> and <see cref="F:PInvoke.User32.INPUT.ki"/> fields.
            </summary>
        </member>
        <member name="T:PInvoke.User32.QueueStatusFlags">
            <summary>
            The types of messages for which to check.
            </summary>
        </member>
        <member name="F:PInvoke.User32.QueueStatusFlags.QS_ALLEVENTS">
            <summary>
            An input, <see cref="F:PInvoke.User32.WindowMessage.WM_TIMER"/>, <see cref="F:PInvoke.User32.WindowMessage.WM_PAINT"/>, <see cref="F:PInvoke.User32.WindowMessage.WM_HOTKEY"/>, or posted message is in the queue.
            </summary>
        </member>
        <member name="F:PInvoke.User32.QueueStatusFlags.QS_ALLINPUT">
            <summary>
            Any message is in the queue.
            </summary>
        </member>
        <member name="F:PInvoke.User32.QueueStatusFlags.QS_ALLPOSTMESSAGE">
            <summary>
            A posted message (other than those listed here) is in the queue.
            </summary>
        </member>
        <member name="F:PInvoke.User32.QueueStatusFlags.QS_HOTKEY">
            <summary>
            A <see cref="F:PInvoke.User32.WindowMessage.WM_HOTKEY"/> message is in the queue.
            </summary>
        </member>
        <member name="F:PInvoke.User32.QueueStatusFlags.QS_INPUT">
            <summary>
            An input message is in the queue.
            </summary>
        </member>
        <member name="F:PInvoke.User32.QueueStatusFlags.QS_KEY">
            <summary>
            A <see cref="F:PInvoke.User32.WindowMessage.WM_KEYUP"/>, <see cref="F:PInvoke.User32.WindowMessage.WM_KEYDOWN"/>, <see cref="F:PInvoke.User32.WindowMessage.WM_SYSKEYUP"/>, or <see cref="F:PInvoke.User32.WindowMessage.WM_SYSKEYDOWN"/> message is in the queue
            </summary>
        </member>
        <member name="F:PInvoke.User32.QueueStatusFlags.QS_MOUSE">
            <summary>
            A <see cref="F:PInvoke.User32.WindowMessage.WM_MOUSEMOVE"/> message or mouse-button message (<see cref="F:PInvoke.User32.WindowMessage.WM_LBUTTONUP"/>, <see cref="F:PInvoke.User32.WindowMessage.WM_RBUTTONDOWN"/>, and so on).
            </summary>
        </member>
        <member name="F:PInvoke.User32.QueueStatusFlags.QS_MOUSEBUTTON">
            <summary>
            A mouse-button message (<see cref="F:PInvoke.User32.WindowMessage.WM_LBUTTONUP"/>, <see cref="F:PInvoke.User32.WindowMessage.WM_RBUTTONDOWN"/>, and so on).
            </summary>
        </member>
        <member name="F:PInvoke.User32.QueueStatusFlags.QS_MOUSEMOVE">
            <summary>
            A <see cref="F:PInvoke.User32.WindowMessage.WM_MOUSEMOVE"/> message is in the queue.
            </summary>
        </member>
        <member name="F:PInvoke.User32.QueueStatusFlags.QS_PAINT">
            <summary>
            A <see cref="F:PInvoke.User32.WindowMessage.WM_PAINT"/> message is in the queue.
            </summary>
        </member>
        <member name="F:PInvoke.User32.QueueStatusFlags.QS_POSTMESSAGE">
            <summary>
            A posted message (other than those listed here) is in the queue.
            </summary>
        </member>
        <member name="F:PInvoke.User32.QueueStatusFlags.QS_RAWINPUT">
            <summary>
            A raw input message is in the queue. For more information, see Raw Input.
            </summary>
            <remarks>Windows 2000:  This flag is not supported.</remarks>
        </member>
        <member name="F:PInvoke.User32.QueueStatusFlags.QS_SENDMESSAGE">
            <summary>
            A message sent by another thread or application is in the queue.
            </summary>
        </member>
        <member name="F:PInvoke.User32.QueueStatusFlags.QS_TIMER">
            <summary>
            A <see cref="F:PInvoke.User32.WindowMessage.WM_TIMER"/> message is in the queue.
            </summary>
        </member>
        <member name="T:PInvoke.User32.PeekMessageParams">
            <summary>
            Specifies how messages are to be handled.
            </summary>
            <remarks>By default, all message types are processed. To specify that only certain message should be processed, specify one or more of the PM_QS_* values.</remarks>
        </member>
        <member name="F:PInvoke.User32.PeekMessageParams.PM_NOREMOVE">
            <summary>
            Messages are not removed from the queue after processing by PeekMessage.
            </summary>
        </member>
        <member name="F:PInvoke.User32.PeekMessageParams.PM_REMOVE">
            <summary>
            Messages are removed from the queue after processing by PeekMessage.
            </summary>
        </member>
        <member name="F:PInvoke.User32.PeekMessageParams.PM_NOYIELD">
            <summary>
            Prevents the system from releasing any thread that is waiting for the caller to go idle (see <see cref="M:PInvoke.User32.WaitForInputIdle(System.IntPtr,System.Int32)"/>).
            </summary>
            <remarks>Combine this value with either PM_NOREMOVE or PM_REMOVE.</remarks>
        </member>
        <member name="F:PInvoke.User32.PeekMessageParams.PM_QS_INPUT">
            <summary>
            Process mouse and keyboard messages.
            </summary>
        </member>
        <member name="F:PInvoke.User32.PeekMessageParams.PM_QS_PAINT">
            <summary>
            Process paint messages.
            </summary>
        </member>
        <member name="F:PInvoke.User32.PeekMessageParams.PM_QS_POSTMESSAGE">
            <summary>
            Process all posted messages, including timers and hotkeys.
            </summary>
        </member>
        <member name="F:PInvoke.User32.PeekMessageParams.PM_QS_SENDMESSAGE">
            <summary>
            Process all sent messages.
            </summary>
        </member>
        <member name="T:PInvoke.User32.SysCommands">
            <summary>
            wParam options for <see cref="F:PInvoke.User32.WindowMessage.WM_SYSCOMMAND"/>
            </summary>
        </member>
        <member name="F:PInvoke.User32.SysCommands.SC_CLOSE">
            <summary>
            Closes the window.
            </summary>
        </member>
        <member name="F:PInvoke.User32.SysCommands.SC_CONTEXTHELP">
            <summary>
            Changes the cursor to a question mark with a pointer. If the user then clicks a control in the dialog box, the control receives a WM_HELP message.
            </summary>
        </member>
        <member name="F:PInvoke.User32.SysCommands.SC_DEFAULT">
            <summary>
            Selects the default item; the user double-clicked the window menu.
            </summary>
        </member>
        <member name="F:PInvoke.User32.SysCommands.SC_HOTKEY">
            <summary>
            Activates the window associated with the application-specified hot key. The lParam parameter identifies the window to activate.
            </summary>
        </member>
        <member name="F:PInvoke.User32.SysCommands.SC_HSCROLL">
            <summary>
            Scrolls horizontally.
            </summary>
        </member>
        <member name="F:PInvoke.User32.SysCommands.SCF_ISSECURE">
            <summary>
            Indicates whether the screen saver is secure.
            </summary>
        </member>
        <member name="F:PInvoke.User32.SysCommands.SC_KEYMENU">
            <summary>
            Retrieves the window menu as a result of a keystroke. For more information, see the Remarks section.
            </summary>
        </member>
        <member name="F:PInvoke.User32.SysCommands.SC_MAXIMIZE">
            <summary>
            Maximizes the window.
            </summary>
        </member>
        <member name="F:PInvoke.User32.SysCommands.SC_MINIMIZE">
            <summary>
            Minimizes the window.
            </summary>
        </member>
        <member name="F:PInvoke.User32.SysCommands.SC_MONITORPOWER">
            <summary>
            Sets the state of the display. This command supports devices that have power-saving features, such as a battery-powered personal computer.
            The lParam parameter can have the following values:
            -1 (the display is powering on)
            1 (the display is going to low power)
            2 (the display is being shut off)
            </summary>
        </member>
        <member name="F:PInvoke.User32.SysCommands.SC_MOUSEMENU">
            <summary>
            Retrieves the window menu as a result of a mouse click.
            </summary>
        </member>
        <member name="F:PInvoke.User32.SysCommands.SC_MOVE">
            <summary>
            Moves the window.
            </summary>
        </member>
        <member name="F:PInvoke.User32.SysCommands.SC_NEXTWINDOW">
            <summary>
            Moves to the next window.
            </summary>
        </member>
        <member name="F:PInvoke.User32.SysCommands.SC_PREVWINDOW">
            <summary>
            Moves to the previous window.
            </summary>
        </member>
        <member name="F:PInvoke.User32.SysCommands.SC_RESTORE">
            <summary>
            Restores the window to its normal position and size.
            </summary>
        </member>
        <member name="F:PInvoke.User32.SysCommands.SC_SCREENSAVE">
            <summary>
            Executes the screen saver application specified in the [boot]
            section of the System.ini file.
            </summary>
        </member>
        <member name="F:PInvoke.User32.SysCommands.SC_SIZE">
            <summary>
            Sizes the window.
            </summary>
        </member>
        <member name="F:PInvoke.User32.SysCommands.SC_TASKLIST">
            <summary>
            Activates the Start menu.
            </summary>
        </member>
        <member name="F:PInvoke.User32.SysCommands.SC_VSCROLL">
            <summary>
            Scrolls vertically.
            </summary>
        </member>
        <member name="T:PInvoke.User32.VirtualKey">
            <summary>Virtual-key codes</summary>
            <remarks>Defined in winuser.h from Windows SDK v6.1</remarks>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_NO_KEY">
            <summary>
            This is an addendum to use on functions in which you have to pass a zero value to represent no key code
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_LBUTTON">
            <summary>
            Left mouse button
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_RBUTTON">
            <summary>
            Right mouse button
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_CANCEL">
            <summary>
            Control-break processing
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_MBUTTON">
            <summary>
            Middle mouse button (three-button mouse)
            </summary>
            <remarks>NOT contiguous with L and R buttons</remarks>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_XBUTTON1">
            <summary>
            X1 mouse button
            </summary>
            <remarks>NOT contiguous with L and R buttons</remarks>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_XBUTTON2">
            <summary>
            X2 mouse button
            </summary>
            <remarks>NOT contiguous with L and R buttons</remarks>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_BACK">
            <summary>
            BACKSPACE key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_TAB">
            <summary>
            TAB key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_CLEAR">
            <summary>
            CLEAR key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_RETURN">
            <summary>
            RETURN key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_SHIFT">
            <summary>
            SHIFT key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_CONTROL">
            <summary>
            CONTROL key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_MENU">
            <summary>
            ALT key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_PAUSE">
            <summary>
            PAUSE key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_CAPITAL">
            <summary>
            CAPS LOCK key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_KANA">
            <summary>
            IME Kana mode
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_HANGEUL">
            <summary>
            IME Hanguel mode (maintained for compatibility; use <see cref="F:PInvoke.User32.VirtualKey.VK_HANGUL"/>)
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_HANGUL">
            <summary>
            IME Hangul mode
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_JUNJA">
            <summary>
            IME Junja mode
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_FINAL">
            <summary>
            IME final mode
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_HANJA">
            <summary>
            IME Hanja mode
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_KANJI">
            <summary>
            IME Kanji mode
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_ESCAPE">
            <summary>
            ESC key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_CONVERT">
            <summary>
            IME convert
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_NONCONVERT">
            <summary>
            IME nonconvert
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_ACCEPT">
            <summary>
            IME accept
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_MODECHANGE">
            <summary>
            IME mode change request
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_SPACE">
            <summary>
            SPACEBAR
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_PRIOR">
            <summary>
            PAGE UP key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_NEXT">
            <summary>
            PAGE DOWN key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_END">
            <summary>
            END key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_HOME">
            <summary>
            HOME key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_LEFT">
            <summary>
            LEFT ARROW key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_UP">
            <summary>
            UP ARROW key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_RIGHT">
            <summary>
            RIGHT ARROW key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_DOWN">
            <summary>
            DOWN ARROW key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_SELECT">
            <summary>
            SELECT key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_PRINT">
            <summary>
            PRINT key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_EXECUTE">
            <summary>
            EXECUTE key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_SNAPSHOT">
            <summary>
            PRINT SCREEN key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_INSERT">
            <summary>
            INS key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_DELETE">
            <summary>
            DEL key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_HELP">
            <summary>
            HELP key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_KEY_0">
            <summary>
            0 key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_KEY_1">
            <summary>
            1 key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_KEY_2">
            <summary>
            2 key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_KEY_3">
            <summary>
            3 key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_KEY_4">
            <summary>
            4 key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_KEY_5">
            <summary>
            5 key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_KEY_6">
            <summary>
            6 key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_KEY_7">
            <summary>
            7 key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_KEY_8">
            <summary>
            8 key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_KEY_9">
            <summary>
            9 key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_A">
            <summary>
            A key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_B">
            <summary>
            B key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_C">
            <summary>
            C key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_D">
            <summary>
            D key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_E">
            <summary>
            E key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_F">
            <summary>
            F key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_G">
            <summary>
            G key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_H">
            <summary>
            H key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_I">
            <summary>
            I key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_J">
            <summary>
            J key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_K">
            <summary>
            K key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_L">
            <summary>
            L key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_M">
            <summary>
            M key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_N">
            <summary>
            N key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_O">
            <summary>
            O key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_P">
            <summary>
            P key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_Q">
            <summary>
            Q key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_R">
            <summary>
            R key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_S">
            <summary>
            S key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_T">
            <summary>
            T key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_U">
            <summary>
            U key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_V">
            <summary>
            V key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_W">
            <summary>
            W key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_X">
            <summary>
            X key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_Y">
            <summary>
            Y key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_Z">
            <summary>
            Z key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_LWIN">
            <summary>
            Left Windows key (Natural keyboard)
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_RWIN">
            <summary>
            Right Windows key (Natural keyboard)
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_APPS">
            <summary>
            Applications key (Natural keyboard)
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_SLEEP">
            <summary>
            Computer Sleep key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_NUMPAD0">
            <summary>
            Numeric keypad 0 key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_NUMPAD1">
            <summary>
            Numeric keypad 1 key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_NUMPAD2">
            <summary>
            Numeric keypad 2 key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_NUMPAD3">
            <summary>
            Numeric keypad 3 key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_NUMPAD4">
            <summary>
            Numeric keypad 4 key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_NUMPAD5">
            <summary>
            Numeric keypad 5 key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_NUMPAD6">
            <summary>
            Numeric keypad 6 key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_NUMPAD7">
            <summary>
            Numeric keypad 7 key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_NUMPAD8">
            <summary>
            Numeric keypad 8 key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_NUMPAD9">
            <summary>
            Numeric keypad 9 key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_MULTIPLY">
            <summary>
            Multiply key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_ADD">
            <summary>
            Add key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_SEPARATOR">
            <summary>
            Separator key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_SUBTRACT">
            <summary>
            Subtract key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_DECIMAL">
            <summary>
            Decimal key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_DIVIDE">
            <summary>
            Divide key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_F1">
            <summary>
            F1 Key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_F2">
            <summary>
            F2 Key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_F3">
            <summary>
            F3 Key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_F4">
            <summary>
            F4 Key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_F5">
            <summary>
            F5 Key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_F6">
            <summary>
            F6 Key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_F7">
            <summary>
            F7 Key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_F8">
            <summary>
            F8 Key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_F9">
            <summary>
            F9 Key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_F10">
            <summary>
            F10 Key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_F11">
            <summary>
            F11 Key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_F12">
            <summary>
            F12 Key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_F13">
            <summary>
            F13 Key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_F14">
            <summary>
            F14 Key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_F15">
            <summary>
            F15 Key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_F16">
            <summary>
            F16 Key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_F17">
            <summary>
            F17 Key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_F18">
            <summary>
            F18 Key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_F19">
            <summary>
            F19 Key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_F20">
            <summary>
            F20 Key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_F21">
            <summary>
            F21 Key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_F22">
            <summary>
            F22 Key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_F23">
            <summary>
            F23 Key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_F24">
            <summary>
            F24 Key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_NUMLOCK">
            <summary>
            NUM LOCK key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_SCROLL">
            <summary>
            SCROLL LOCK key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_OEM_NEC_EQUAL">
            <summary>
            '=' key on numpad (NEC PC-9800 kbd definitions)
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_OEM_FJ_JISHO">
            <summary>
            'Dictionary' key (Fujitsu/OASYS kbd definitions)
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_OEM_FJ_MASSHOU">
            <summary>
            'Unregister word' key (Fujitsu/OASYS kbd definitions)
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_OEM_FJ_TOUROKU">
            <summary>
            'Register word' key (Fujitsu/OASYS kbd definitions)
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_OEM_FJ_LOYA">
            <summary>
            'Left OYAYUBI' key (Fujitsu/OASYS kbd definitions)
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_OEM_FJ_ROYA">
            <summary>
            'Right OYAYUBI' key (Fujitsu/OASYS kbd definitions)
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_LSHIFT">
            <summary>
            Left SHIFT key
            </summary>
            <remarks>Used only as parameters to <see cref="M:PInvoke.User32.GetAsyncKeyState(PInvoke.User32.VirtualKey)" /> and  <see cref="M:PInvoke.User32.GetKeyState(PInvoke.User32.VirtualKey)" />. * No other API or message will distinguish left and right keys in this way.</remarks>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_RSHIFT">
            <summary>
            Right SHIFT key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_LCONTROL">
            <summary>
            Left CONTROL key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_RCONTROL">
            <summary>
            Right CONTROL key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_LMENU">
            <summary>
            Left MENU key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_RMENU">
            <summary>
            Right MENU key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_BROWSER_BACK">
            <summary>
            Browser Back key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_BROWSER_FORWARD">
            <summary>
            Browser Forward  key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_BROWSER_REFRESH">
            <summary>
            Browser Refresh  key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_BROWSER_STOP">
            <summary>
            Browser Stop  key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_BROWSER_SEARCH">
            <summary>
            Browser Search  key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_BROWSER_FAVORITES">
            <summary>
            Browser Favorites  key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_BROWSER_HOME">
            <summary>
            Browser Start and Home key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_VOLUME_MUTE">
            <summary>
            Volume Mute key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_VOLUME_DOWN">
            <summary>
            Volume Down key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_VOLUME_UP">
            <summary>
            Volume Up key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_MEDIA_NEXT_TRACK">
            <summary>
            Next Track key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_MEDIA_PREV_TRACK">
            <summary>
            Previous Track key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_MEDIA_STOP">
            <summary>
            Stop Media key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_MEDIA_PLAY_PAUSE">
            <summary>
            Play/Pause Media key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_LAUNCH_MAIL">
            <summary>
            Start Mail key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_LAUNCH_MEDIA_SELECT">
            <summary>
            Select Media key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_LAUNCH_APP1">
            <summary>
            Start Application 1 key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_LAUNCH_APP2">
            <summary>
            Start Application 2 key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_OEM_1">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard.
            </summary>
            <remarks>For the US standard keyboard, the ';:' key</remarks>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_OEM_PLUS">
            <summary>
            For any country/region, the '+' key.
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_OEM_COMMA">
            <summary>
            For any country/region, the ',' key.
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_OEM_MINUS">
            <summary>
            For any country/region, the '-' key.
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_OEM_PERIOD">
            <summary>
            For any country/region, the '.' key.
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_OEM_2">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard.
            </summary>
            <remarks>For the US standard keyboard, the '/?' key</remarks>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_OEM_3">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard.
            </summary>
            <remarks>For the US standard keyboard, the '`~' key</remarks>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_OEM_4">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard.
            </summary>
            <remarks>For the US standard keyboard, the '[{' key</remarks>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_OEM_5">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard.
            </summary>
            <remarks>For the US standard keyboard, the '\|' key</remarks>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_OEM_6">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard.
            </summary>
            <remarks>For the US standard keyboard, the ']}' key</remarks>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_OEM_7">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard.
            </summary>
            <remarks>For the US standard keyboard, the 'single-quote/double-quote' (''"') key</remarks>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_OEM_8">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard.
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_OEM_AX">
            <summary>
            OEM specific
            </summary>
            <remarks>'AX' key on Japanese AX kbd</remarks>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_OEM_102">
            <summary>
            Either the angle bracket ("<![CDATA[<>]]>") key or the backslash ("\|") key on the RT 102-key keyboard
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_ICO_HELP">
            <summary>
            OEM specific
            </summary>
            <remarks>Help key on ICO</remarks>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_ICO_00">
            <summary>
            OEM specific
            </summary>
            <remarks>00 key on ICO</remarks>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_PROCESSKEY">
            <summary>
            IME PROCESS key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_ICO_CLEAR">
            <summary>
            OEM specific
            </summary>
            <remarks>Clear key on ICO</remarks>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_PACKET">
            <summary>
            Used to pass Unicode characters as if they were keystrokes. The VK_PACKET key is the low word of a 32-bit Virtual Key value used for non-keyboard input methods.
            </summary>
            <remarks>For more information, see Remark in <see cref="T:PInvoke.User32.KEYBDINPUT"/>, <see cref="M:PInvoke.User32.SendInput(System.Int32,PInvoke.User32.INPUT*,System.Int32)"/>, <see cref="F:PInvoke.User32.WindowMessage.WM_KEYDOWN"/>, and <see cref="F:PInvoke.User32.WindowMessage.WM_KEYUP"/></remarks>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_OEM_RESET">
            <summary>
            Nokia/Ericsson definition
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_OEM_JUMP">
            <summary>
            Nokia/Ericsson definition
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_OEM_PA1">
            <summary>
            Nokia/Ericsson definition
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_OEM_PA2">
            <summary>
            Nokia/Ericsson definition
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_OEM_PA3">
            <summary>
            Nokia/Ericsson definition
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_OEM_WSCTRL">
            <summary>
            Nokia/Ericsson definition
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_OEM_CUSEL">
            <summary>
            Nokia/Ericsson definition
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_OEM_ATTN">
            <summary>
            Nokia/Ericsson definition
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_OEM_FINISH">
            <summary>
            Nokia/Ericsson definition
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_OEM_COPY">
            <summary>
            Nokia/Ericsson definition
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_OEM_AUTO">
            <summary>
            Nokia/Ericsson definition
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_OEM_ENLW">
            <summary>
            Nokia/Ericsson definition
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_OEM_BACKTAB">
            <summary>
            Nokia/Ericsson definition
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_ATTN">
            <summary>
            Attn key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_CRSEL">
            <summary>
            CrSel key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_EXSEL">
            <summary>
            ExSel key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_EREOF">
            <summary>
            Erase EOF key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_PLAY">
            <summary>
            Play key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_ZOOM">
            <summary>
            Zoom key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_NONAME">
            <summary>
            Reserved constant by Windows headers definition
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_PA1">
            <summary>
            PA1 key
            </summary>
        </member>
        <member name="F:PInvoke.User32.VirtualKey.VK_OEM_CLEAR">
            <summary>
            Clear key
            </summary>
        </member>
        <member name="T:PInvoke.User32.ScanCode">
            <summary>
            General keyboard scan code constants on the same order that it can be found on <see cref="T:PInvoke.User32.VirtualKey" /> constants
            </summary>
            <remarks>Scan codes are device-dependant values, these are general values used by most keyboards.</remarks>
        </member>
        <member name="T:PInvoke.User32.WindowMessage">
            <summary>
            Windows Messages
            Defined in winuser.h from Windows SDK v6.1
            Documentation pulled from MSDN.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_NULL">
            <summary>
            The WM_NULL message performs no operation. An application sends the WM_NULL message if it wants to post a message that the recipient window will ignore.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_CREATE">
            <summary>
            The WM_CREATE message is sent when an application requests that a window be created by calling the CreateWindowEx or CreateWindow function. (The message is sent before the function returns.) The window procedure of the new window receives this message after the window is created, but before the window becomes visible.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_DESTROY">
            <summary>
            The WM_DESTROY message is sent when a window is being destroyed. It is sent to the window procedure of the window being destroyed after the window is removed from the screen.
            This message is sent first to the window being destroyed and then to the child windows (if any) as they are destroyed. During the processing of the message, it can be assumed that all child windows still exist.
            /// </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_MOVE">
            <summary>
            The WM_MOVE message is sent after a window has been moved.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_SIZE">
            <summary>
            The WM_SIZE message is sent to a window after its size has changed.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_ACTIVATE">
            <summary>
            The WM_ACTIVATE message is sent to both the window being activated and the window being deactivated. If the windows use the same input queue, the message is sent synchronously, first to the window procedure of the top-level window being deactivated, then to the window procedure of the top-level window being activated. If the windows use different input queues, the message is sent asynchronously, so the window is activated immediately.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_SETFOCUS">
            <summary>
            The WM_SETFOCUS message is sent to a window after it has gained the keyboard focus.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_KILLFOCUS">
            <summary>
            The WM_KILLFOCUS message is sent to a window immediately before it loses the keyboard focus.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_ENABLE">
            <summary>
            The WM_ENABLE message is sent when an application changes the enabled state of a window. It is sent to the window whose enabled state is changing. This message is sent before the EnableWindow function returns, but after the enabled state (WS_DISABLED style bit) of the window has changed.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_SETREDRAW">
            <summary>
            An application sends the WM_SETREDRAW message to a window to allow changes in that window to be redrawn or to prevent changes in that window from being redrawn.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_SETTEXT">
            <summary>
            An application sends a WM_SETTEXT message to set the text of a window.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_GETTEXT">
            <summary>
            An application sends a WM_GETTEXT message to copy the text that corresponds to a window into a buffer provided by the caller.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_GETTEXTLENGTH">
            <summary>
            An application sends a WM_GETTEXTLENGTH message to determine the length, in characters, of the text associated with a window.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_PAINT">
            <summary>
            The WM_PAINT message is sent when the system or another application makes a request to paint a portion of an application's window. The message is sent when the UpdateWindow or RedrawWindow function is called, or by the DispatchMessage function when the application obtains a WM_PAINT message by using the GetMessage or PeekMessage function.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_CLOSE">
            <summary>
            The WM_CLOSE message is sent as a signal that a window or an application should terminate.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_QUERYENDSESSION">
            <summary>
            The WM_QUERYENDSESSION message is sent when the user chooses to end the session or when an application calls one of the system shutdown functions. If any application returns zero, the session is not ended. The system stops sending WM_QUERYENDSESSION messages as soon as one application returns zero.
            After processing this message, the system sends the WM_ENDSESSION message with the wParam parameter set to the results of the WM_QUERYENDSESSION message.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_QUERYOPEN">
            <summary>
            The WM_QUERYOPEN message is sent to an icon when the user requests that the window be restored to its previous size and position.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_ENDSESSION">
            <summary>
            The WM_ENDSESSION message is sent to an application after the system processes the results of the WM_QUERYENDSESSION message. The WM_ENDSESSION message informs the application whether the session is ending.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_QUIT">
            <summary>
            The WM_QUIT message indicates a request to terminate an application and is generated when the application calls the PostQuitMessage function. It causes the GetMessage function to return zero.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_ERASEBKGND">
            <summary>
            The WM_ERASEBKGND message is sent when the window background must be erased (for example, when a window is resized). The message is sent to prepare an invalidated portion of a window for painting.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_SYSCOLORCHANGE">
            <summary>
            This message is sent to all top-level windows when a change is made to a system color setting.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_SHOWWINDOW">
            <summary>
            The WM_SHOWWINDOW message is sent to a window when the window is about to be hidden or shown.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_WININICHANGE">
            <summary>
            An application sends the WM_WININICHANGE message to all top-level windows after making a change to the WIN.INI file. The SystemParametersInfo function sends this message after an application uses the function to change a setting in WIN.INI.
            Note  The WM_WININICHANGE message is provided only for compatibility with earlier versions of the system. Applications should use the WM_SETTINGCHANGE message.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_SETTINGCHANGE">
            <summary>
            An application sends the WM_WININICHANGE message to all top-level windows after making a change to the WIN.INI file. The SystemParametersInfo function sends this message after an application uses the function to change a setting in WIN.INI.
            Note  The WM_WININICHANGE message is provided only for compatibility with earlier versions of the system. Applications should use the WM_SETTINGCHANGE message.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_DEVMODECHANGE">
            <summary>
            The WM_DEVMODECHANGE message is sent to all top-level windows whenever the user changes device-mode settings.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_ACTIVATEAPP">
            <summary>
            The WM_ACTIVATEAPP message is sent when a window belonging to a different application than the active window is about to be activated. The message is sent to the application whose window is being activated and to the application whose window is being deactivated.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_FONTCHANGE">
            <summary>
            An application sends the WM_FONTCHANGE message to all top-level windows in the system after changing the pool of font resources.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_TIMECHANGE">
            <summary>
            A message that is sent whenever there is a change in the system time.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_CANCELMODE">
            <summary>
            The WM_CANCELMODE message is sent to cancel certain modes, such as mouse capture. For example, the system sends this message to the active window when a dialog box or message box is displayed. Certain functions also send this message explicitly to the specified window regardless of whether it is the active window. For example, the EnableWindow function sends this message when disabling the specified window.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_SETCURSOR">
            <summary>
            The WM_SETCURSOR message is sent to a window if the mouse causes the cursor to move within a window and mouse input is not captured.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_MOUSEACTIVATE">
            <summary>
            The WM_MOUSEACTIVATE message is sent when the cursor is in an inactive window and the user presses a mouse button. The parent window receives this message only if the child window passes it to the DefWindowProc function.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_CHILDACTIVATE">
            <summary>
            The WM_CHILDACTIVATE message is sent to a child window when the user clicks the window's title bar or when the window is activated, moved, or sized.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_QUEUESYNC">
            <summary>
            The WM_QUEUESYNC message is sent by a computer-based training (CBT) application to separate user-input messages from other messages sent through the WH_JOURNALPLAYBACK Hook procedure.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_GETMINMAXINFO">
            <summary>
            The WM_GETMINMAXINFO message is sent to a window when the size or position of the window is about to change. An application can use this message to override the window's default maximized size and position, or its default minimum or maximum tracking size.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_PAINTICON">
            <summary>
            Windows NT 3.51 and earlier: The WM_PAINTICON message is sent to a minimized window when the icon is to be painted. This message is not sent by newer versions of Microsoft Windows, except in unusual circumstances explained in the Remarks.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_ICONERASEBKGND">
            <summary>
            Windows NT 3.51 and earlier: The WM_ICONERASEBKGND message is sent to a minimized window when the background of the icon must be filled before painting the icon. A window receives this message only if a class icon is defined for the window; otherwise, WM_ERASEBKGND is sent. This message is not sent by newer versions of Windows.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_NEXTDLGCTL">
            <summary>
            The WM_NEXTDLGCTL message is sent to a dialog box procedure to set the keyboard focus to a different control in the dialog box.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_SPOOLERSTATUS">
            <summary>
            The WM_SPOOLERSTATUS message is sent from Print Manager whenever a job is added to or removed from the Print Manager queue.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_DRAWITEM">
            <summary>
            The WM_DRAWITEM message is sent to the parent window of an owner-drawn button, combo box, list box, or menu when a visual aspect of the button, combo box, list box, or menu has changed.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_MEASUREITEM">
            <summary>
            The WM_MEASUREITEM message is sent to the owner window of a combo box, list box, list view control, or menu item when the control or menu is created.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_DELETEITEM">
            <summary>
            Sent to the owner of a list box or combo box when the list box or combo box is destroyed or when items are removed by the LB_DELETESTRING, LB_RESETCONTENT, CB_DELETESTRING, or CB_RESETCONTENT message. The system sends a WM_DELETEITEM message for each deleted item. The system sends the WM_DELETEITEM message for any deleted list box or combo box item with nonzero item data.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_VKEYTOITEM">
            <summary>
            Sent by a list box with the LBS_WANTKEYBOARDINPUT style to its owner in response to a WM_KEYDOWN message.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_CHARTOITEM">
            <summary>
            Sent by a list box with the LBS_WANTKEYBOARDINPUT style to its owner in response to a WM_CHAR message.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_SETFONT">
            <summary>
            An application sends a WM_SETFONT message to specify the font that a control is to use when drawing text.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_GETFONT">
            <summary>
            An application sends a WM_GETFONT message to a control to retrieve the font with which the control is currently drawing its text.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_SETHOTKEY">
            <summary>
            An application sends a WM_SETHOTKEY message to a window to associate a hot key with the window. When the user presses the hot key, the system activates the window.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_GETHOTKEY">
            <summary>
            An application sends a WM_GETHOTKEY message to determine the hot key associated with a window.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_QUERYDRAGICON">
            <summary>
            The WM_QUERYDRAGICON message is sent to a minimized (iconic) window. The window is about to be dragged by the user but does not have an icon defined for its class. An application can return a handle to an icon or cursor. The system displays this cursor or icon while the user drags the icon.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_COMPAREITEM">
            <summary>
            The system sends the WM_COMPAREITEM message to determine the relative position of a new item in the sorted list of an owner-drawn combo box or list box. Whenever the application adds a new item, the system sends this message to the owner of a combo box or list box created with the CBS_SORT or LBS_SORT style.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_GETOBJECT">
            <summary>
            Active Accessibility sends the WM_GETOBJECT message to obtain information about an accessible object contained in a server application.
            Applications never send this message directly. It is sent only by Active Accessibility in response to calls to AccessibleObjectFromPoint, AccessibleObjectFromEvent, or AccessibleObjectFromWindow. However, server applications handle this message.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_COMPACTING">
            <summary>
            The WM_COMPACTING message is sent to all top-level windows when the system detects more than 12.5 percent of system time over a 30- to 60-second interval is being spent compacting memory. This indicates that system memory is low.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_COMMNOTIFY">
            <summary>
            WM_COMMNOTIFY is Obsolete for Win32-Based Applications
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_WINDOWPOSCHANGING">
            <summary>
            The WM_WINDOWPOSCHANGING message is sent to a window whose size, position, or place in the Z order is about to change as a result of a call to the SetWindowPos function or another window-management function.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_WINDOWPOSCHANGED">
            <summary>
            The WM_WINDOWPOSCHANGED message is sent to a window whose size, position, or place in the Z order has changed as a result of a call to the SetWindowPos function or another window-management function.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_POWER">
            <summary>
            Notifies applications that the system, typically a battery-powered personal computer, is about to enter a suspended mode.
            Use: POWERBROADCAST
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_COPYDATA">
            <summary>
            An application sends the WM_COPYDATA message to pass data to another application.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_CANCELJOURNAL">
            <summary>
            The WM_CANCELJOURNAL message is posted to an application when a user cancels the application's journaling activities. The message is posted with a NULL window handle.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_NOTIFY">
            <summary>
            Sent by a common control to its parent window when an event has occurred or the control requires some information.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_INPUTLANGCHANGEREQUEST">
            <summary>
            The WM_INPUTLANGCHANGEREQUEST message is posted to the window with the focus when the user chooses a new input language, either with the hotkey (specified in the Keyboard control panel application) or from the indicator on the system taskbar. An application can accept the change by passing the message to the DefWindowProc function or reject the change (and prevent it from taking place) by returning immediately.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_INPUTLANGCHANGE">
            <summary>
            The WM_INPUTLANGCHANGE message is sent to the topmost affected window after an application's input language has been changed. You should make any application-specific settings and pass the message to the DefWindowProc function, which passes the message to all first-level child windows. These child windows can pass the message to DefWindowProc to have it pass the message to their child windows, and so on.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_TCARD">
            <summary>
            Sent to an application that has initiated a training card with Microsoft Windows Help. The message informs the application when the user clicks an authorable button. An application initiates a training card by specifying the HELP_TCARD command in a call to the WinHelp function.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_HELP">
            <summary>
            Indicates that the user pressed the F1 key. If a menu is active when F1 is pressed, WM_HELP is sent to the window associated with the menu; otherwise, WM_HELP is sent to the window that has the keyboard focus. If no window has the keyboard focus, WM_HELP is sent to the currently active window.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_USERCHANGED">
            <summary>
            The WM_USERCHANGED message is sent to all windows after the user has logged on or off. When the user logs on or off, the system updates the user-specific settings. The system sends this message immediately after updating the settings.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_NOTIFYFORMAT">
            <summary>
            Determines if a window accepts ANSI or Unicode structures in the WM_NOTIFY notification message. WM_NOTIFYFORMAT messages are sent from a common control to its parent window and from the parent window to the common control.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_CONTEXTMENU">
            <summary>
            The WM_CONTEXTMENU message notifies a window that the user clicked the right mouse button (right-clicked) in the window.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_STYLECHANGING">
            <summary>
            The WM_STYLECHANGING message is sent to a window when the SetWindowLong function is about to change one or more of the window's styles.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_STYLECHANGED">
            <summary>
            The WM_STYLECHANGED message is sent to a window after the SetWindowLong function has changed one or more of the window's styles
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_DISPLAYCHANGE">
            <summary>
            The WM_DISPLAYCHANGE message is sent to all windows when the display resolution has changed.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_GETICON">
            <summary>
            The WM_GETICON message is sent to a window to retrieve a handle to the large or small icon associated with a window. The system displays the large icon in the ALT+TAB dialog, and the small icon in the window caption.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_SETICON">
            <summary>
            An application sends the WM_SETICON message to associate a new large or small icon with a window. The system displays the large icon in the ALT+TAB dialog box, and the small icon in the window caption.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_NCCREATE">
            <summary>
            The WM_NCCREATE message is sent prior to the WM_CREATE message when a window is first created.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_NCDESTROY">
            <summary>
            The WM_NCDESTROY message informs a window that its nonclient area is being destroyed. The DestroyWindow function sends the WM_NCDESTROY message to the window following the WM_DESTROY message. WM_DESTROY is used to free the allocated memory object associated with the window.
            The WM_NCDESTROY message is sent after the child windows have been destroyed. In contrast, WM_DESTROY is sent before the child windows are destroyed.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_NCCALCSIZE">
            <summary>
            The WM_NCCALCSIZE message is sent when the size and position of a window's client area must be calculated. By processing this message, an application can control the content of the window's client area when the size or position of the window changes.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_NCHITTEST">
            <summary>
            The WM_NCHITTEST message is sent to a window when the cursor moves, or when a mouse button is pressed or released. If the mouse is not captured, the message is sent to the window beneath the cursor. Otherwise, the message is sent to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_NCPAINT">
            <summary>
            The WM_NCPAINT message is sent to a window when its frame must be painted.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_NCACTIVATE">
            <summary>
            The WM_NCACTIVATE message is sent to a window when its nonclient area needs to be changed to indicate an active or inactive state.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_GETDLGCODE">
            <summary>
            The WM_GETDLGCODE message is sent to the window procedure associated with a control. By default, the system handles all keyboard input to the control; the system interprets certain types of keyboard input as dialog box navigation keys. To override this default behavior, the control can respond to the WM_GETDLGCODE message to indicate the types of input it wants to process itself.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_SYNCPAINT">
            <summary>
            The WM_SYNCPAINT message is used to synchronize painting while avoiding linking independent GUI threads.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_NCMOUSEMOVE">
            <summary>
            The WM_NCMOUSEMOVE message is posted to a window when the cursor is moved within the nonclient area of the window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_NCLBUTTONDOWN">
            <summary>
            The WM_NCLBUTTONDOWN message is posted when the user presses the left mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_NCLBUTTONUP">
            <summary>
            The WM_NCLBUTTONUP message is posted when the user releases the left mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_NCLBUTTONDBLCLK">
            <summary>
            The WM_NCLBUTTONDBLCLK message is posted when the user double-clicks the left mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_NCRBUTTONDOWN">
            <summary>
            The WM_NCRBUTTONDOWN message is posted when the user presses the right mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_NCRBUTTONUP">
            <summary>
            The WM_NCRBUTTONUP message is posted when the user releases the right mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_NCRBUTTONDBLCLK">
            <summary>
            The WM_NCRBUTTONDBLCLK message is posted when the user double-clicks the right mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_NCMBUTTONDOWN">
            <summary>
            The WM_NCMBUTTONDOWN message is posted when the user presses the middle mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_NCMBUTTONUP">
            <summary>
            The WM_NCMBUTTONUP message is posted when the user releases the middle mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_NCMBUTTONDBLCLK">
            <summary>
            The WM_NCMBUTTONDBLCLK message is posted when the user double-clicks the middle mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_NCXBUTTONDOWN">
            <summary>
            The WM_NCXBUTTONDOWN message is posted when the user presses the first or second X button while the cursor is in the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_NCXBUTTONUP">
            <summary>
            The WM_NCXBUTTONUP message is posted when the user releases the first or second X button while the cursor is in the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_NCXBUTTONDBLCLK">
            <summary>
            The WM_NCXBUTTONDBLCLK message is posted when the user double-clicks the first or second X button while the cursor is in the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_BM_CLICK">
            <summary>
            The WM_INPUT_DEVICE_CHANGE message is sent to the window that registered to receive raw input. A window receives this message through its WindowProc function.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_INPUT_DEVICE_CHANGE">
            <summary>
            The WM_INPUT_DEVICE_CHANGE message is sent to the window that registered to receive raw input. A window receives this message through its WindowProc function.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_INPUT">
            <summary>
            The WM_INPUT message is sent to the window that is getting raw input.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_KEYFIRST">
            <summary>
            This message filters for keyboard messages.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_KEYDOWN">
            <summary>
            The WM_KEYDOWN message is posted to the window with the keyboard focus when a nonsystem key is pressed. A nonsystem key is a key that is pressed when the ALT key is not pressed.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_KEYUP">
            <summary>
            The WM_KEYUP message is posted to the window with the keyboard focus when a nonsystem key is released. A nonsystem key is a key that is pressed when the ALT key is not pressed, or a keyboard key that is pressed when a window has the keyboard focus.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_CHAR">
            <summary>
            The WM_CHAR message is posted to the window with the keyboard focus when a WM_KEYDOWN message is translated by the TranslateMessage function. The WM_CHAR message contains the character code of the key that was pressed.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_DEADCHAR">
            <summary>
            The WM_DEADCHAR message is posted to the window with the keyboard focus when a WM_KEYUP message is translated by the TranslateMessage function. WM_DEADCHAR specifies a character code generated by a dead key. A dead key is a key that generates a character, such as the umlaut (double-dot), that is combined with another character to form a composite character. For example, the umlaut-O character (Ö) is generated by typing the dead key for the umlaut character, and then typing the O key.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_SYSKEYDOWN">
            <summary>
            The WM_SYSKEYDOWN message is posted to the window with the keyboard focus when the user presses the F10 key (which activates the menu bar) or holds down the ALT key and then presses another key. It also occurs when no window currently has the keyboard focus; in this case, the WM_SYSKEYDOWN message is sent to the active window. The window that receives the message can distinguish between these two contexts by checking the context code in the lParam parameter.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_SYSKEYUP">
            <summary>
            The WM_SYSKEYUP message is posted to the window with the keyboard focus when the user releases a key that was pressed while the ALT key was held down. It also occurs when no window currently has the keyboard focus; in this case, the WM_SYSKEYUP message is sent to the active window. The window that receives the message can distinguish between these two contexts by checking the context code in the lParam parameter.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_SYSCHAR">
            <summary>
            The WM_SYSCHAR message is posted to the window with the keyboard focus when a WM_SYSKEYDOWN message is translated by the TranslateMessage function. It specifies the character code of a system character key — that is, a character key that is pressed while the ALT key is down.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_SYSDEADCHAR">
            <summary>
            The WM_SYSDEADCHAR message is sent to the window with the keyboard focus when a WM_SYSKEYDOWN message is translated by the TranslateMessage function. WM_SYSDEADCHAR specifies the character code of a system dead key — that is, a dead key that is pressed while holding down the ALT key.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_UNICHAR">
            <summary>
            The WM_UNICHAR message is posted to the window with the keyboard focus when a WM_KEYDOWN message is translated by the TranslateMessage function. The WM_UNICHAR message contains the character code of the key that was pressed.
            The WM_UNICHAR message is equivalent to WM_CHAR, but it uses Unicode Transformation Format (UTF)-32, whereas WM_CHAR uses UTF-16. It is designed to send or post Unicode characters to ANSI windows and it can can handle Unicode Supplementary Plane characters.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_KEYLAST">
            <summary>
            This message filters for keyboard messages.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_IME_STARTCOMPOSITION">
            <summary>
            Sent immediately before the IME generates the composition string as a result of a keystroke. A window receives this message through its WindowProc function.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_IME_ENDCOMPOSITION">
            <summary>
            Sent to an application when the IME ends composition. A window receives this message through its WindowProc function.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_IME_COMPOSITION">
            <summary>
            Sent to an application when the IME changes composition status as a result of a keystroke. A window receives this message through its WindowProc function.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_INITDIALOG">
            <summary>
            The WM_INITDIALOG message is sent to the dialog box procedure immediately before a dialog box is displayed. Dialog box procedures typically use this message to initialize controls and carry out any other initialization tasks that affect the appearance of the dialog box.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_COMMAND">
            <summary>
            The WM_COMMAND message is sent when the user selects a command item from a menu, when a control sends a notification message to its parent window, or when an accelerator keystroke is translated.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_SYSCOMMAND">
            <summary>
            A window receives this message when the user chooses a command from the Window menu, clicks the maximize button, minimize button, restore button, close button, or moves the form. You can stop the form from moving by filtering this out.
            <remarks>See <see cref="T:PInvoke.User32.SysCommands"/> for wParam.</remarks>
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_TIMER">
            <summary>
            The WM_TIMER message is posted to the installing thread's message queue when a timer expires. The message is posted by the GetMessage or PeekMessage function.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_HSCROLL">
            <summary>
            The WM_HSCROLL message is sent to a window when a scroll event occurs in the window's standard horizontal scroll bar. This message is also sent to the owner of a horizontal scroll bar control when a scroll event occurs in the control.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_VSCROLL">
            <summary>
            The WM_VSCROLL message is sent to a window when a scroll event occurs in the window's standard vertical scroll bar. This message is also sent to the owner of a vertical scroll bar control when a scroll event occurs in the control.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_INITMENU">
            <summary>
            The WM_INITMENU message is sent when a menu is about to become active. It occurs when the user clicks an item on the menu bar or presses a menu key. This allows the application to modify the menu before it is displayed.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_INITMENUPOPUP">
            <summary>
            The WM_INITMENUPOPUP message is sent when a drop-down menu or submenu is about to become active. This allows an application to modify the menu before it is displayed, without changing the entire menu.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_MENUSELECT">
            <summary>
            The WM_MENUSELECT message is sent to a menu's owner window when the user selects a menu item.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_MENUCHAR">
            <summary>
            The WM_MENUCHAR message is sent when a menu is active and the user presses a key that does not correspond to any mnemonic or accelerator key. This message is sent to the window that owns the menu.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_ENTERIDLE">
            <summary>
            The WM_ENTERIDLE message is sent to the owner window of a modal dialog box or menu that is entering an idle state. A modal dialog box or menu enters an idle state when no messages are waiting in its queue after it has processed one or more previous messages.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_MENURBUTTONUP">
            <summary>
            The WM_MENURBUTTONUP message is sent when the user releases the right mouse button while the cursor is on a menu item.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_MENUDRAG">
            <summary>
            The WM_MENUDRAG message is sent to the owner of a drag-and-drop menu when the user drags a menu item.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_MENUGETOBJECT">
            <summary>
            The WM_MENUGETOBJECT message is sent to the owner of a drag-and-drop menu when the mouse cursor enters a menu item or moves from the center of the item to the top or bottom of the item.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_UNINITMENUPOPUP">
            <summary>
            The WM_UNINITMENUPOPUP message is sent when a drop-down menu or submenu has been destroyed.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_MENUCOMMAND">
            <summary>
            The WM_MENUCOMMAND message is sent when the user makes a selection from a menu.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_CHANGEUISTATE">
            <summary>
            An application sends the WM_CHANGEUISTATE message to indicate that the user interface (UI) state should be changed.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_UPDATEUISTATE">
            <summary>
            An application sends the WM_UPDATEUISTATE message to change the user interface (UI) state for the specified window and all its child windows.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_QUERYUISTATE">
            <summary>
            An application sends the WM_QUERYUISTATE message to retrieve the user interface (UI) state for a window.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_CTLCOLORMSGBOX">
            <summary>
            The WM_CTLCOLORMSGBOX message is sent to the owner window of a message box before Windows draws the message box. By responding to this message, the owner window can set the text and background colors of the message box by using the given display device context handle.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_CTLCOLOREDIT">
            <summary>
            An edit control that is not read-only or disabled sends the WM_CTLCOLOREDIT message to its parent window when the control is about to be drawn. By responding to this message, the parent window can use the specified device context handle to set the text and background colors of the edit control.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_CTLCOLORLISTBOX">
            <summary>
            Sent to the parent window of a list box before the system draws the list box. By responding to this message, the parent window can set the text and background colors of the list box by using the specified display device context handle.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_CTLCOLORBTN">
            <summary>
            The WM_CTLCOLORBTN message is sent to the parent window of a button before drawing the button. The parent window can change the button's text and background colors. However, only owner-drawn buttons respond to the parent window processing this message.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_CTLCOLORDLG">
            <summary>
            The WM_CTLCOLORDLG message is sent to a dialog box before the system draws the dialog box. By responding to this message, the dialog box can set its text and background colors using the specified display device context handle.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_CTLCOLORSCROLLBAR">
            <summary>
            The WM_CTLCOLORSCROLLBAR message is sent to the parent window of a scroll bar control when the control is about to be drawn. By responding to this message, the parent window can use the display context handle to set the background color of the scroll bar control.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_CTLCOLORSTATIC">
            <summary>
            A static control, or an edit control that is read-only or disabled, sends the WM_CTLCOLORSTATIC message to its parent window when the control is about to be drawn. By responding to this message, the parent window can use the specified device context handle to set the text and background colors of the static control.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_MOUSEFIRST">
            <summary>
            Use WM_MOUSEFIRST to specify the first mouse message. Use the PeekMessage() Function.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_MOUSEMOVE">
            <summary>
            The WM_MOUSEMOVE message is posted to a window when the cursor moves. If the mouse is not captured, the message is posted to the window that contains the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_LBUTTONDOWN">
            <summary>
            The WM_LBUTTONDOWN message is posted when the user presses the left mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_LBUTTONUP">
            <summary>
            The WM_LBUTTONUP message is posted when the user releases the left mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_LBUTTONDBLCLK">
            <summary>
            The WM_LBUTTONDBLCLK message is posted when the user double-clicks the left mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_RBUTTONDOWN">
            <summary>
            The WM_RBUTTONDOWN message is posted when the user presses the right mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_RBUTTONUP">
            <summary>
            The WM_RBUTTONUP message is posted when the user releases the right mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_RBUTTONDBLCLK">
            <summary>
            The WM_RBUTTONDBLCLK message is posted when the user double-clicks the right mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_MBUTTONDOWN">
            <summary>
            The WM_MBUTTONDOWN message is posted when the user presses the middle mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_MBUTTONUP">
            <summary>
            The WM_MBUTTONUP message is posted when the user releases the middle mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_MBUTTONDBLCLK">
            <summary>
            The WM_MBUTTONDBLCLK message is posted when the user double-clicks the middle mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_MOUSEWHEEL">
            <summary>
            The WM_MOUSEWHEEL message is sent to the focus window when the mouse wheel is rotated. The DefWindowProc function propagates the message to the window's parent. There should be no internal forwarding of the message, since DefWindowProc propagates it up the parent chain until it finds a window that processes it.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_XBUTTONDOWN">
            <summary>
            The WM_XBUTTONDOWN message is posted when the user presses the first or second X button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_XBUTTONUP">
            <summary>
            The WM_XBUTTONUP message is posted when the user releases the first or second X button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_XBUTTONDBLCLK">
            <summary>
            The WM_XBUTTONDBLCLK message is posted when the user double-clicks the first or second X button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_MOUSEHWHEEL">
            <summary>
            The WM_MOUSEHWHEEL message is sent to the focus window when the mouse's horizontal scroll wheel is tilted or rotated. The DefWindowProc function propagates the message to the window's parent. There should be no internal forwarding of the message, since DefWindowProc propagates it up the parent chain until it finds a window that processes it.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_MOUSELAST">
            <summary>
            Use WM_MOUSELAST to specify the last mouse message. Used with PeekMessage() Function.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_PARENTNOTIFY">
            <summary>
            The WM_PARENTNOTIFY message is sent to the parent of a child window when the child window is created or destroyed, or when the user clicks a mouse button while the cursor is over the child window. When the child window is being created, the system sends WM_PARENTNOTIFY just before the CreateWindow or CreateWindowEx function that creates the window returns. When the child window is being destroyed, the system sends the message before any processing to destroy the window takes place.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_ENTERMENULOOP">
            <summary>
            The WM_ENTERMENULOOP message informs an application's main window procedure that a menu modal loop has been entered.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_EXITMENULOOP">
            <summary>
            The WM_EXITMENULOOP message informs an application's main window procedure that a menu modal loop has been exited.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_NEXTMENU">
            <summary>
            The WM_NEXTMENU message is sent to an application when the right or left arrow key is used to switch between the menu bar and the system menu.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_SIZING">
            <summary>
            The WM_SIZING message is sent to a window that the user is resizing. By processing this message, an application can monitor the size and position of the drag rectangle and, if needed, change its size or position.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_CAPTURECHANGED">
            <summary>
            The WM_CAPTURECHANGED message is sent to the window that is losing the mouse capture.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_MOVING">
            <summary>
            The WM_MOVING message is sent to a window that the user is moving. By processing this message, an application can monitor the position of the drag rectangle and, if needed, change its position.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_POWERBROADCAST">
            <summary>
            Notifies applications that a power-management event has occurred.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_DEVICECHANGE">
            <summary>
            Notifies an application of a change to the hardware configuration of a device or the computer.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_MDICREATE">
            <summary>
            An application sends the WM_MDICREATE message to a multiple-document interface (MDI) client window to create an MDI child window.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_MDIDESTROY">
            <summary>
            An application sends the WM_MDIDESTROY message to a multiple-document interface (MDI) client window to close an MDI child window.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_MDIACTIVATE">
            <summary>
            An application sends the WM_MDIACTIVATE message to a multiple-document interface (MDI) client window to instruct the client window to activate a different MDI child window.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_MDIRESTORE">
            <summary>
            An application sends the WM_MDIRESTORE message to a multiple-document interface (MDI) client window to restore an MDI child window from maximized or minimized size.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_MDINEXT">
            <summary>
            An application sends the WM_MDINEXT message to a multiple-document interface (MDI) client window to activate the next or previous child window.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_MDIMAXIMIZE">
            <summary>
            An application sends the WM_MDIMAXIMIZE message to a multiple-document interface (MDI) client window to maximize an MDI child window. The system resizes the child window to make its client area fill the client window. The system places the child window's window menu icon in the rightmost position of the frame window's menu bar, and places the child window's restore icon in the leftmost position. The system also appends the title bar text of the child window to that of the frame window.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_MDITILE">
            <summary>
            An application sends the WM_MDITILE message to a multiple-document interface (MDI) client window to arrange all of its MDI child windows in a tile format.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_MDICASCADE">
            <summary>
            An application sends the WM_MDICASCADE message to a multiple-document interface (MDI) client window to arrange all its child windows in a cascade format.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_MDIICONARRANGE">
            <summary>
            An application sends the WM_MDIICONARRANGE message to a multiple-document interface (MDI) client window to arrange all minimized MDI child windows. It does not affect child windows that are not minimized.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_MDIGETACTIVE">
            <summary>
            An application sends the WM_MDIGETACTIVE message to a multiple-document interface (MDI) client window to retrieve the handle to the active MDI child window.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_MDISETMENU">
            <summary>
            An application sends the WM_MDISETMENU message to a multiple-document interface (MDI) client window to replace the entire menu of an MDI frame window, to replace the window menu of the frame window, or both.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_ENTERSIZEMOVE">
            <summary>
            The WM_ENTERSIZEMOVE message is sent one time to a window after it enters the moving or sizing modal loop. The window enters the moving or sizing modal loop when the user clicks the window's title bar or sizing border, or when the window passes the WM_SYSCOMMAND message to the DefWindowProc function and the wParam parameter of the message specifies the SC_MOVE or SC_SIZE value. The operation is complete when DefWindowProc returns.
            The system sends the WM_ENTERSIZEMOVE message regardless of whether the dragging of full windows is enabled.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_EXITSIZEMOVE">
            <summary>
            The WM_EXITSIZEMOVE message is sent one time to a window, after it has exited the moving or sizing modal loop. The window enters the moving or sizing modal loop when the user clicks the window's title bar or sizing border, or when the window passes the WM_SYSCOMMAND message to the DefWindowProc function and the wParam parameter of the message specifies the SC_MOVE or SC_SIZE value. The operation is complete when DefWindowProc returns.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_DROPFILES">
            <summary>
            Sent when the user drops a file on the window of an application that has registered itself as a recipient of dropped files.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_MDIREFRESHMENU">
            <summary>
            An application sends the WM_MDIREFRESHMENU message to a multiple-document interface (MDI) client window to refresh the window menu of the MDI frame window.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_IME_SETCONTEXT">
            <summary>
            Sent to an application when a window is activated. A window receives this message through its WindowProc function.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_IME_NOTIFY">
            <summary>
            Sent to an application to notify it of changes to the IME window. A window receives this message through its WindowProc function.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_IME_CONTROL">
            <summary>
            Sent by an application to direct the IME window to carry out the requested command. The application uses this message to control the IME window that it has created. To send this message, the application calls the SendMessage function with the following parameters.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_IME_COMPOSITIONFULL">
            <summary>
            Sent to an application when the IME window finds no space to extend the area for the composition window. A window receives this message through its WindowProc function.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_IME_SELECT">
            <summary>
            Sent to an application when the operating system is about to change the current IME. A window receives this message through its WindowProc function.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_IME_CHAR">
            <summary>
            Sent to an application when the IME gets a character of the conversion result. A window receives this message through its WindowProc function.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_IME_REQUEST">
            <summary>
            Sent to an application to provide commands and request information. A window receives this message through its WindowProc function.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_IME_KEYDOWN">
            <summary>
            Sent to an application by the IME to notify the application of a key press and to keep message order. A window receives this message through its WindowProc function.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_IME_KEYUP">
            <summary>
            Sent to an application by the IME to notify the application of a key release and to keep message order. A window receives this message through its WindowProc function.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_MOUSEHOVER">
            <summary>
            The WM_MOUSEHOVER message is posted to a window when the cursor hovers over the client area of the window for the period of time specified in a prior call to TrackMouseEvent.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_MOUSELEAVE">
            <summary>
            The WM_MOUSELEAVE message is posted to a window when the cursor leaves the client area of the window specified in a prior call to TrackMouseEvent.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_NCMOUSEHOVER">
            <summary>
            The WM_NCMOUSEHOVER message is posted to a window when the cursor hovers over the nonclient area of the window for the period of time specified in a prior call to TrackMouseEvent.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_NCMOUSELEAVE">
            <summary>
            The WM_NCMOUSELEAVE message is posted to a window when the cursor leaves the nonclient area of the window specified in a prior call to TrackMouseEvent.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_WTSSESSION_CHANGE">
            <summary>
            The WM_WTSSESSION_CHANGE message notifies applications of changes in session state.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_CUT">
            <summary>
            An application sends a WM_CUT message to an edit control or combo box to delete (cut) the current selection, if any, in the edit control and copy the deleted text to the clipboard in CF_TEXT format.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_COPY">
            <summary>
            An application sends the WM_COPY message to an edit control or combo box to copy the current selection to the clipboard in CF_TEXT format.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_PASTE">
            <summary>
            An application sends a WM_PASTE message to an edit control or combo box to copy the current content of the clipboard to the edit control at the current caret position. Data is inserted only if the clipboard contains data in CF_TEXT format.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_CLEAR">
            <summary>
            An application sends a WM_CLEAR message to an edit control or combo box to delete (clear) the current selection, if any, from the edit control.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_UNDO">
            <summary>
            An application sends a WM_UNDO message to an edit control to undo the last operation. When this message is sent to an edit control, the previously deleted text is restored or the previously added text is deleted.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_RENDERFORMAT">
            <summary>
            The WM_RENDERFORMAT message is sent to the clipboard owner if it has delayed rendering a specific clipboard format and if an application has requested data in that format. The clipboard owner must render data in the specified format and place it on the clipboard by calling the SetClipboardData function.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_RENDERALLFORMATS">
            <summary>
            The WM_RENDERALLFORMATS message is sent to the clipboard owner before it is destroyed, if the clipboard owner has delayed rendering one or more clipboard formats. For the content of the clipboard to remain available to other applications, the clipboard owner must render data in all the formats it is capable of generating, and place the data on the clipboard by calling the SetClipboardData function.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_DESTROYCLIPBOARD">
            <summary>
            The WM_DESTROYCLIPBOARD message is sent to the clipboard owner when a call to the EmptyClipboard function empties the clipboard.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_DRAWCLIPBOARD">
            <summary>
            The WM_DRAWCLIPBOARD message is sent to the first window in the clipboard viewer chain when the content of the clipboard changes. This enables a clipboard viewer window to display the new content of the clipboard.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_PAINTCLIPBOARD">
            <summary>
            The WM_PAINTCLIPBOARD message is sent to the clipboard owner by a clipboard viewer window when the clipboard contains data in the CF_OWNERDISPLAY format and the clipboard viewer's client area needs repainting.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_VSCROLLCLIPBOARD">
            <summary>
            The WM_VSCROLLCLIPBOARD message is sent to the clipboard owner by a clipboard viewer window when the clipboard contains data in the CF_OWNERDISPLAY format and an event occurs in the clipboard viewer's vertical scroll bar. The owner should scroll the clipboard image and update the scroll bar values.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_SIZECLIPBOARD">
            <summary>
            The WM_SIZECLIPBOARD message is sent to the clipboard owner by a clipboard viewer window when the clipboard contains data in the CF_OWNERDISPLAY format and the clipboard viewer's client area has changed size.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_ASKCBFORMATNAME">
            <summary>
            The WM_ASKCBFORMATNAME message is sent to the clipboard owner by a clipboard viewer window to request the name of a CF_OWNERDISPLAY clipboard format.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_CHANGECBCHAIN">
            <summary>
            The WM_CHANGECBCHAIN message is sent to the first window in the clipboard viewer chain when a window is being removed from the chain.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_HSCROLLCLIPBOARD">
            <summary>
            The WM_HSCROLLCLIPBOARD message is sent to the clipboard owner by a clipboard viewer window. This occurs when the clipboard contains data in the CF_OWNERDISPLAY format and an event occurs in the clipboard viewer's horizontal scroll bar. The owner should scroll the clipboard image and update the scroll bar values.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_QUERYNEWPALETTE">
            <summary>
            This message informs a window that it is about to receive the keyboard focus, giving the window the opportunity to realize its logical palette when it receives the focus.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_PALETTEISCHANGING">
            <summary>
            The WM_PALETTEISCHANGING message informs applications that an application is going to realize its logical palette.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_PALETTECHANGED">
            <summary>
            This message is sent by the OS to all top-level and overlapped windows after the window with the keyboard focus realizes its logical palette.
            This message enables windows that do not have the keyboard focus to realize their logical palettes and update their client areas.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_HOTKEY">
            <summary>
            The WM_HOTKEY message is posted when the user presses a hot key registered by the RegisterHotKey function. The message is placed at the top of the message queue associated with the thread that registered the hot key.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_PRINT">
            <summary>
            The WM_PRINT message is sent to a window to request that it draw itself in the specified device context, most commonly in a printer device context.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_PRINTCLIENT">
            <summary>
            The WM_PRINTCLIENT message is sent to a window to request that it draw its client area in the specified device context, most commonly in a printer device context.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_APPCOMMAND">
            <summary>
            The WM_APPCOMMAND message notifies a window that the user generated an application command event, for example, by clicking an application command button using the mouse or typing an application command key on the keyboard.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_THEMECHANGED">
            <summary>
            The WM_THEMECHANGED message is broadcast to every window following a theme change event. Examples of theme change events are the activation of a theme, the deactivation of a theme, or a transition from one theme to another.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_CLIPBOARDUPDATE">
            <summary>
            Sent when the contents of the clipboard have changed.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_DWMCOMPOSITIONCHANGED">
            <summary>
            The system will send a window the WM_DWMCOMPOSITIONCHANGED message to indicate that the availability of desktop composition has changed.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_DWMNCRENDERINGCHANGED">
            <summary>
            WM_DWMNCRENDERINGCHANGED is called when the non-client area rendering status of a window has changed. Only windows that have set the flag DWM_BLURBEHIND.fTransitionOnMaximized to true will get this message.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_DWMCOLORIZATIONCOLORCHANGED">
            <summary>
            Sent to all top-level windows when the colorization color has changed.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_DWMWINDOWMAXIMIZEDCHANGE">
            <summary>
            WM_DWMWINDOWMAXIMIZEDCHANGE will let you know when a DWM composed window is maximized. You also have to register for this message as well. You'd have other windowd go opaque when this message is sent.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_GETTITLEBARINFOEX">
            <summary>
            Sent to request extended title bar information. A window receives this message through its WindowProc function.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_APP">
            <summary>
            The WM_APP constant is used by applications to help define private messages, usually of the form WM_APP+X, where X is an integer value.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_USER">
            <summary>
            The WM_USER constant is used by applications to help define private messages for use by private window classes, usually of the form WM_USER+X, where X is an integer value.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_CPL_LAUNCH">
            <summary>
            An application sends the WM_CPL_LAUNCH message to Windows Control Panel to request that a Control Panel application be started.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_CPL_LAUNCHED">
            <summary>
            The WM_CPL_LAUNCHED message is sent when a Control Panel application, started by the WM_CPL_LAUNCH message, has closed. The WM_CPL_LAUNCHED message is sent to the window identified by the wParam parameter of the WM_CPL_LAUNCH message that started the application.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_SYSTIMER">
            <summary>
            WM_SYSTIMER is a well-known yet still undocumented message. Windows uses WM_SYSTIMER for internal actions like scrolling.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_HSHELL_ACCESSIBILITYSTATE">
            <summary>
            The accessibility state has changed.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_HSHELL_ACTIVATESHELLWINDOW">
            <summary>
            The shell should activate its main window.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_HSHELL_APPCOMMAND">
            <summary>
            The user completed an input event (for example, pressed an application command button on the mouse or an application command key on the keyboard), and the application did not handle the WM_APPCOMMAND message generated by that input.
            If the Shell procedure handles the WM_COMMAND message, it should not call CallNextHookEx. See the Return Value section for more information.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_HSHELL_GETMINRECT">
            <summary>
            A window is being minimized or maximized. The system needs the coordinates of the minimized rectangle for the window.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_HSHELL_LANGUAGE">
            <summary>
            Keyboard language was changed or a new keyboard layout was loaded.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_HSHELL_REDRAW">
            <summary>
            The title of a window in the task bar has been redrawn.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_HSHELL_TASKMAN">
            <summary>
            The user has selected the task list. A shell application that provides a task list should return TRUE to prevent Windows from starting its task list.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_HSHELL_WINDOWCREATED">
            <summary>
            A top-level, unowned window has been created. The window exists when the system calls this hook.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_HSHELL_WINDOWDESTROYED">
            <summary>
            A top-level, unowned window is about to be destroyed. The window still exists when the system calls this hook.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_HSHELL_WINDOWACTIVATED">
            <summary>
            The activation has changed to a different top-level, unowned window.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowMessage.WM_HSHELL_WINDOWREPLACED">
            <summary>
            A top-level window is being replaced. The window exists when the system calls this hook.
            </summary>
        </member>
        <member name="T:PInvoke.User32.MessageBeepType">
            <summary>
            Types of sounds that can be emitted by the <see cref="M:PInvoke.User32.MessageBeep(PInvoke.User32.MessageBeepType)"/> method.
            </summary>
        </member>
        <member name="F:PInvoke.User32.MessageBeepType.SimpleBeep">
            <summary>
            A simple beep. If the sound card is not available, the sound is generated using the speaker.
            </summary>
        </member>
        <member name="F:PInvoke.User32.MessageBeepType.MB_ICONASTERISK">
            <summary>
            See <see cref="F:PInvoke.User32.MessageBeepType.MB_ICONINFORMATION"/>.
            </summary>
        </member>
        <member name="F:PInvoke.User32.MessageBeepType.MB_ICONEXCLAMATION">
            <summary>
            See <see cref="F:PInvoke.User32.MessageBeepType.MB_ICONWARNING"/>.
            </summary>
        </member>
        <member name="F:PInvoke.User32.MessageBeepType.MB_ICONERROR">
            <summary>
            The sound specified as the Windows Critical Stop sound.
            </summary>
        </member>
        <member name="F:PInvoke.User32.MessageBeepType.MB_ICONHAND">
            <summary>
            See <see cref="F:PInvoke.User32.MessageBeepType.MB_ICONERROR"/>.
            </summary>
        </member>
        <member name="F:PInvoke.User32.MessageBeepType.MB_ICONINFORMATION">
            <summary>
            The sound specified as the Windows Asterisk sound.
            </summary>
        </member>
        <member name="F:PInvoke.User32.MessageBeepType.MB_ICONQUESTION">
            <summary>
            The sound specified as the Windows Question sound.
            </summary>
        </member>
        <member name="F:PInvoke.User32.MessageBeepType.MB_ICONSTOP">
            <summary>
            See <see cref="F:PInvoke.User32.MessageBeepType.MB_ICONERROR"/>.
            </summary>
        </member>
        <member name="F:PInvoke.User32.MessageBeepType.MB_ICONWARNING">
            <summary>
            The sound specified as the Windows Exclamation sound.
            </summary>
        </member>
        <member name="F:PInvoke.User32.MessageBeepType.MB_OK">
            <summary>
            The sound specified as the Windows Default Beep sound.
            </summary>
        </member>
        <member name="T:PInvoke.User32.FlashWindowFlags">
            <summary>The flash status stored in <see cref="T:PInvoke.User32.FLASHWINFO" /> and used in <see cref="M:PInvoke.User32.FlashWindowEx(PInvoke.User32.FLASHWINFO@)" />.</summary>
        </member>
        <member name="F:PInvoke.User32.FlashWindowFlags.FLASHW_ALL">
            <summary>
                Flash both the window caption and taskbar button. This is equivalent to setting the FLASHW_CAPTION |
                FLASHW_TRAY flags.
            </summary>
        </member>
        <member name="F:PInvoke.User32.FlashWindowFlags.FLASHW_CAPTION">
            <summary>Flash the window caption.</summary>
        </member>
        <member name="F:PInvoke.User32.FlashWindowFlags.FLASHW_STOP">
            <summary>Stop flashing. The system restores the window to its original state.</summary>
        </member>
        <member name="F:PInvoke.User32.FlashWindowFlags.FLASHW_TIMER">
            <summary>Flash continuously, until the <see cref="F:PInvoke.User32.FlashWindowFlags.FLASHW_STOP" /> flag is set.</summary>
        </member>
        <member name="F:PInvoke.User32.FlashWindowFlags.FLASHW_TIMERNOFG">
            <summary>Flash continuously until the window comes to the foreground.</summary>
        </member>
        <member name="F:PInvoke.User32.FlashWindowFlags.FLASHW_TRAY">
            <summary>Flash the taskbar button.</summary>
        </member>
        <member name="T:PInvoke.User32.FLASHWINFO">
            <summary>
                Contains the flash status for a window and the number of times the system should flash the window. Used in
                <see cref="M:PInvoke.User32.FlashWindowEx(PInvoke.User32.FLASHWINFO@)" />.
            </summary>
        </member>
        <member name="F:PInvoke.User32.FLASHWINFO.cbSize">
            <summary>The size of the structure, in bytes.</summary>
        </member>
        <member name="F:PInvoke.User32.FLASHWINFO.hwnd">
            <summary>A handle to the window to be flashed. The window can be either opened or minimized.</summary>
        </member>
        <member name="F:PInvoke.User32.FLASHWINFO.dwFlags">
            <summary>The flash status</summary>
        </member>
        <member name="F:PInvoke.User32.FLASHWINFO.uCount">
            <summary>The number of times to flash the window.</summary>
        </member>
        <member name="F:PInvoke.User32.FLASHWINFO.dwTimeout">
            <summary>
                The rate at which the window is to be flashed, in milliseconds. If <see cref="F:PInvoke.User32.FLASHWINFO.dwTimeout"/> is zero, the
                function uses the default cursor blink rate.
            </summary>
        </member>
        <member name="M:PInvoke.User32.FLASHWINFO.Create">
            <summary>
            Create a new instance of <see cref="T:PInvoke.User32.FLASHWINFO"/> with <see cref="F:PInvoke.User32.FLASHWINFO.cbSize"/> set to the correct value.
            </summary>
            <returns>A new instance of <see cref="T:PInvoke.User32.FLASHWINFO"/> with <see cref="F:PInvoke.User32.FLASHWINFO.cbSize"/> set to the correct value.</returns>
        </member>
        <member name="T:PInvoke.User32.LookupIconIdFromDirectoryExFlags">
            <summary>
            Flags for the <see cref="M:PInvoke.User32.LookupIconIdFromDirectoryEx(System.Byte*,System.Boolean,System.Int32,System.Int32,PInvoke.User32.LookupIconIdFromDirectoryExFlags)"/> method.
            </summary>
        </member>
        <member name="F:PInvoke.User32.LookupIconIdFromDirectoryExFlags.LR_DEFAULTCOLOR">
            <summary>
            Uses the default color format.
            </summary>
        </member>
        <member name="F:PInvoke.User32.LookupIconIdFromDirectoryExFlags.LR_MONOCHROME">
            <summary>
            Creates a monochrome icon or cursor.
            </summary>
        </member>
        <member name="T:PInvoke.User32.MapVirtualKeyTranslation">
            <summary>The translation to be performed in <see cref="M:PInvoke.User32.MapVirtualKey(System.Int32,PInvoke.User32.MapVirtualKeyTranslation)" />.</summary>
        </member>
        <member name="F:PInvoke.User32.MapVirtualKeyTranslation.MAPVK_VK_TO_CHAR">
            <summary>
                uCode is a virtual-key code and is translated into an unshifted character value in the low-order word of the
                return value. Dead keys (diacritics) are indicated by setting the top bit of the return value. If there is no
                translation, the function returns 0.
            </summary>
        </member>
        <member name="F:PInvoke.User32.MapVirtualKeyTranslation.MAPVK_VK_TO_VSC">
            <summary>
                uCode is a virtual-key code and is translated into a scan code. If it is a virtual-key code that does not
                distinguish between left- and right-hand keys, the left-hand scan code is returned. If there is no translation, the
                function returns 0.
            </summary>
        </member>
        <member name="F:PInvoke.User32.MapVirtualKeyTranslation.MAPVK_VSC_TO_VK">
            <summary>
                uCode is a scan code and is translated into a virtual-key code that does not distinguish between left- and
                right-hand keys. If there is no translation, the function returns 0.
            </summary>
        </member>
        <member name="F:PInvoke.User32.MapVirtualKeyTranslation.MAPVK_VSC_TO_VK_EX">
            <summary>
                uCode is a scan code and is translated into a virtual-key code that distinguishes between left- and right-hand
                keys. If there is no translation, the function returns 0.
            </summary>
        </member>
        <member name="T:PInvoke.User32.MenuItemFlags">
            <summary>
            Controls the appearance and behavior of a menu item
            </summary>
        </member>
        <member name="F:PInvoke.User32.MenuItemFlags.MF_BITMAP">
            <summary>Uses a bitmap as the menu item. The lpNewItem parameter contains a handle to the bitmap.</summary>
        </member>
        <member name="F:PInvoke.User32.MenuItemFlags.MF_CHECKED">
            <summary>
                Places a check mark next to the menu item. If the application provides check-mark bitmaps (see
                SetMenuItemBitmaps) this flag displays the check-mark bitmap next to the menu item.
            </summary>
        </member>
        <member name="F:PInvoke.User32.MenuItemFlags.MF_DISABLED">
            <summary>Disables the menu item so that it cannot be selected, but the flag does not gray it.</summary>
        </member>
        <member name="F:PInvoke.User32.MenuItemFlags.MF_ENABLED">
            <summary>Enables the menu item so that it can be selected, and restores it from its grayed state.</summary>
        </member>
        <member name="F:PInvoke.User32.MenuItemFlags.MF_GRAYED">
            <summary>Disables the menu item and grays it so that it cannot be selected.</summary>
        </member>
        <member name="F:PInvoke.User32.MenuItemFlags.MF_MENUBARBREAK">
            <summary>
                Functions the same as the MF_MENUBREAK flag for a menu bar. For a drop-down menu, submenu, or shortcut menu,
                the new column is separated from the old column by a vertical line.
            </summary>
        </member>
        <member name="F:PInvoke.User32.MenuItemFlags.MF_MENUBREAK">
            <summary>
                Places the item on a new line (for a menu bar) or in a new column (for a drop-down menu, submenu, or shortcut
                menu) without separating columns.
            </summary>
        </member>
        <member name="F:PInvoke.User32.MenuItemFlags.MF_OWNERDRAW">
            <summary>
                Specifies that the item is an owner-drawn item. Before the menu is displayed for the first time, the window
                that owns the menu receives a WM_MEASUREITEM message to retrieve the width and height of the menu item. The
                WM_DRAWITEM message is then sent to the window procedure of the owner window whenever the appearance of the menu
                item must be updated.
            </summary>
        </member>
        <member name="F:PInvoke.User32.MenuItemFlags.MF_POPUP">
            <summary>
                Specifies that the menu item opens a drop-down menu or submenu. The uIDNewItem parameter specifies a handle to
                the drop-down menu or submenu. This flag is used to add a menu name to a menu bar, or a menu item that opens a
                submenu to a drop-down menu, submenu, or shortcut menu.
            </summary>
        </member>
        <member name="F:PInvoke.User32.MenuItemFlags.MF_SEPARATOR">
            <summary>
                Draws a horizontal dividing line. This flag is used only in a drop-down menu, submenu, or shortcut menu. The
                line cannot be grayed, disabled, or highlighted. The lpNewItem and uIDNewItem parameters are ignored.
            </summary>
        </member>
        <member name="F:PInvoke.User32.MenuItemFlags.MF_STRING">
            <summary>Specifies that the menu item is a text string; the lpNewItem parameter is a pointer to the string.</summary>
        </member>
        <member name="F:PInvoke.User32.MenuItemFlags.MF_UNCHECKED">
            <summary>
                Does not place a check mark next to the item (default). If the application supplies check-mark bitmaps (see
                SetMenuItemBitmaps), this flag displays the clear bitmap next to the menu item.
            </summary>
        </member>
        <member name="T:PInvoke.User32.MENUITEMINFO">
            <summary>
            Contains information about a menu item.
            </summary>
        </member>
        <member name="F:PInvoke.User32.MENUITEMINFO.cbSize">
            <summary>The size of the structure, in bytes.</summary>
        </member>
        <member name="F:PInvoke.User32.MENUITEMINFO.fMask">
            <summary>Indicates the members to be retrieved or set.</summary>
        </member>
        <member name="F:PInvoke.User32.MENUITEMINFO.fType">
            <summary>The menu item type.</summary>
        </member>
        <member name="F:PInvoke.User32.MENUITEMINFO.fState">
            <summary>The menu item state.</summary>
        </member>
        <member name="F:PInvoke.User32.MENUITEMINFO.wID">
            <summary>
                An application-defined value that identifies the menu item. Set <see cref="F:PInvoke.User32.MENUITEMINFO.fMask" /> to
                <see cref="F:PInvoke.User32.MenuMembersMask.MIIM_ID" /> to use <see cref="F:PInvoke.User32.MENUITEMINFO.wID" />.
            </summary>
        </member>
        <member name="F:PInvoke.User32.MENUITEMINFO.hSubMenu">
            <summary>
                A handle to the drop-down menu or submenu associated with the menu item. If the menu item is not an item that
                opens a drop-down menu or submenu, this member is <see cref="F:System.IntPtr.Zero" />. Set <see cref="F:PInvoke.User32.MENUITEMINFO.fMask" /> to
                <see cref="F:PInvoke.User32.MenuMembersMask.MIIM_SUBMENU" /> to use hSubMenu.
            </summary>
        </member>
        <member name="F:PInvoke.User32.MENUITEMINFO.hbmpChecked">
            <summary>
                A handle to the bitmap to display next to the item if it is selected. If this member is
                <see cref="F:System.IntPtr.Zero" />, a default bitmap is used. If the <see cref="F:PInvoke.User32.MenuItemType.MFT_RADIOCHECK" /> type value
                is specified, the default bitmap is a bullet. Otherwise, it is a check mark. Set fMask to
                <see cref="F:PInvoke.User32.MenuMembersMask.MIIM_CHECKMARKS" /> to use <see cref="F:PInvoke.User32.MENUITEMINFO.hbmpChecked" />.
            </summary>
        </member>
        <member name="F:PInvoke.User32.MENUITEMINFO.hbmpUnchecked">
            <summary>
                A handle to the bitmap to display next to the item if it is not selected. If this member is
                <see cref="F:System.IntPtr.Zero" />, no bitmap is used. Set <see cref="F:PInvoke.User32.MENUITEMINFO.fMask" /> to
                <see cref="F:PInvoke.User32.MenuMembersMask.MIIM_CHECKMARKS" /> to use <see cref="F:PInvoke.User32.MENUITEMINFO.hbmpUnchecked" />.
            </summary>
        </member>
        <member name="F:PInvoke.User32.MENUITEMINFO.dwItemData">
            <summary>
                An application-defined value associated with the menu item. Set <see cref="F:PInvoke.User32.MENUITEMINFO.fMask" /> to
                <see cref="F:PInvoke.User32.MenuMembersMask.MIIM_DATA" /> to use <see cref="F:PInvoke.User32.MENUITEMINFO.dwItemData" />.
            </summary>
        </member>
        <member name="F:PInvoke.User32.MENUITEMINFO.dwTypeData">
            <summary>
                The contents of the menu item. The meaning of this member depends on the value of fType and is used only if the
                MIIM_TYPE flag is set in the fMask member.
                <para>
                    To retrieve a menu item of type <see cref="F:PInvoke.User32.MenuItemType.MFT_STRING" />, first find the size of the string by
                    setting the <see cref="F:PInvoke.User32.MENUITEMINFO.dwTypeData" />
                    member of <see cref="T:PInvoke.User32.MENUITEMINFO" /> to <see cref="F:System.IntPtr.Zero" /> and then calling
                    <see cref="M:PInvoke.User32.GetMenuItemInfo(System.IntPtr,System.UInt32,System.Boolean,PInvoke.User32.MENUITEMINFO@)" />. The value of <see cref="F:PInvoke.User32.MENUITEMINFO.cch" />+1 is the size needed. Then allocate a buffer of
                    this size, place the pointer to the buffer in dwTypeData, increment cch, and call
                    <see cref="M:PInvoke.User32.GetMenuItemInfo(System.IntPtr,System.UInt32,System.Boolean,PInvoke.User32.MENUITEMINFO@)" /> once again to fill the buffer with the string. If the retrieved menu item is of
                    some other type, then <see cref="M:PInvoke.User32.GetMenuItemInfo(System.IntPtr,System.UInt32,System.Boolean,PInvoke.User32.MENUITEMINFO@)" /> sets the <see cref="F:PInvoke.User32.MENUITEMINFO.dwTypeData" /> member to a value whose
                    type is specified by the <see cref="F:PInvoke.User32.MENUITEMINFO.fType" /> member.
                </para>
                <para>
                    When using with the <see cref="M:PInvoke.User32.SetMenuItemInfo(System.IntPtr,System.UInt32,System.Boolean,PInvoke.User32.MENUITEMINFO@)" /> function, this member should contain a value whose type is
                    specified by the <see cref="F:PInvoke.User32.MENUITEMINFO.fType" /> member.
                </para>
                <para>
                    dwTypeData is used only if the <see cref="F:PInvoke.User32.MenuMembersMask.MIIM_STRING" /> flag is set in the
                    <see cref="F:PInvoke.User32.MENUITEMINFO.fMask" /> member
                </para>
            </summary>
        </member>
        <member name="F:PInvoke.User32.MENUITEMINFO.cch">
            <summary>
                The length of the menu item text, in characters, when information is received about a menu item of the
                <see cref="F:PInvoke.User32.MenuItemType.MFT_STRING" />
                type. However, <see cref="F:PInvoke.User32.MENUITEMINFO.cch" /> is used only if the <see cref="F:PInvoke.User32.MenuMembersMask.MIIM_TYPE" /> flag is set in the
                <see cref="F:PInvoke.User32.MENUITEMINFO.fMask" /> member and is zero otherwise. Also, <see cref="F:PInvoke.User32.MENUITEMINFO.cch" />
                is ignored when the content of a menu item is set by calling <see cref="M:PInvoke.User32.SetMenuItemInfo(System.IntPtr,System.UInt32,System.Boolean,PInvoke.User32.MENUITEMINFO@)" />.
                <para>
                    Note that, before calling <see cref="M:PInvoke.User32.GetMenuItemInfo(System.IntPtr,System.UInt32,System.Boolean,PInvoke.User32.MENUITEMINFO@)" />, the application must set <see cref="F:PInvoke.User32.MENUITEMINFO.cch" /> to the
                    length of the buffer pointed to by the <see cref="F:PInvoke.User32.MENUITEMINFO.dwTypeData" /> member. If the retrieved menu item is of type
                    <see cref="F:PInvoke.User32.MenuItemType.MFT_STRING" /> (as indicated by the <see cref="F:PInvoke.User32.MENUITEMINFO.fType" />
                    member), then <see cref="M:PInvoke.User32.GetMenuItemInfo(System.IntPtr,System.UInt32,System.Boolean,PInvoke.User32.MENUITEMINFO@)" /> changes <see cref="F:PInvoke.User32.MENUITEMINFO.cch" /> to the length of the menu item text. If
                    the retrieved menu item is of some other type, <see cref="M:PInvoke.User32.GetMenuItemInfo(System.IntPtr,System.UInt32,System.Boolean,PInvoke.User32.MENUITEMINFO@)" /> sets the <see cref="F:PInvoke.User32.MENUITEMINFO.cch" /> field
                    to zero.
                </para>
                <para>
                    The <see cref="F:PInvoke.User32.MENUITEMINFO.cch" /> member is used when the <see cref="F:PInvoke.User32.MenuMembersMask.MIIM_STRING" /> flag is set in the
                    <see cref="F:PInvoke.User32.MENUITEMINFO.fMask" /> member.
                </para>
            </summary>
        </member>
        <member name="F:PInvoke.User32.MENUITEMINFO.hbmpItem">
            <summary>
                A handle to the bitmap to be displayed, or it can be one of the following values :
                <para>
                    <see cref="F:PInvoke.User32.HBMMENU_CALLBACK" />
                </para>
                <para>
                    <see cref="F:PInvoke.User32.HBMMENU_MBAR_CLOSE" />
                </para>
                <para>
                    <see cref="F:PInvoke.User32.HBMMENU_MBAR_CLOSE_D" />
                </para>
                <para>
                    <see cref="F:PInvoke.User32.HBMMENU_MBAR_MINIMIZE" />
                </para>
                <para>
                    <see cref="F:PInvoke.User32.HBMMENU_MBAR_MINIMIZE_D" />
                </para>
                <para>
                    <see cref="F:PInvoke.User32.HBMMENU_MBAR_RESTORE" />
                </para>
                <para>
                    <see cref="F:PInvoke.User32.HBMMENU_POPUP_CLOSE" />
                </para>
                <para>
                    <see cref="F:PInvoke.User32.HBMMENU_POPUP_MAXIMIZE" />
                </para>
                <para>
                    <see cref="F:PInvoke.User32.HBMMENU_POPUP_MINIMIZE" />
                </para>
                <para>
                    <see cref="F:PInvoke.User32.HBMMENU_POPUP_RESTORE" />
                </para>
                <para>
                    <see cref="F:PInvoke.User32.HBMMENU_SYSTEM" />
                </para>
            </summary>
        </member>
        <member name="M:PInvoke.User32.MENUITEMINFO.Create">
            <summary>
            Create a new instance of <see cref="T:PInvoke.User32.MENUITEMINFO"/> with <see cref="F:PInvoke.User32.MENUITEMINFO.cbSize"/> set to the correct value.
            </summary>
            <returns>A new instance of <see cref="T:PInvoke.User32.MENUITEMINFO"/> with <see cref="F:PInvoke.User32.MENUITEMINFO.cbSize"/> set to the correct value.</returns>
        </member>
        <member name="T:PInvoke.User32.MenuItemState">
            <summary>The menu item state in <see cref="T:PInvoke.User32.MENUITEMINFO" />.</summary>
        </member>
        <member name="F:PInvoke.User32.MenuItemState.MFS_CHECKED">
            <summary>
                Checks the menu item. For more information about selected menu items, see the
                <see cref="F:PInvoke.User32.MENUITEMINFO.hbmpChecked" /> member.
            </summary>
        </member>
        <member name="F:PInvoke.User32.MenuItemState.MFS_DEFAULT">
            <summary>
                Specifies that the menu item is the default. A menu can contain only one default menu item, which is displayed
                in bold.
            </summary>
        </member>
        <member name="F:PInvoke.User32.MenuItemState.MFS_DISABLED">
            <summary>
                Disables the menu item and grays it so that it cannot be selected. This is equivalent to
                <see cref="F:PInvoke.User32.MenuItemState.MFS_GRAYED" />.
            </summary>
        </member>
        <member name="F:PInvoke.User32.MenuItemState.MFS_ENABLED">
            <summary>Enables the menu item so that it can be selected. This is the default state.</summary>
        </member>
        <member name="F:PInvoke.User32.MenuItemState.MFS_GRAYED">
            <summary>
                Disables the menu item and grays it so that it cannot be selected. This is equivalent to
                <see cref="F:PInvoke.User32.MenuItemState.MFS_DISABLED" />.
            </summary>
        </member>
        <member name="F:PInvoke.User32.MenuItemState.MFS_HILITE">
            <summary>Highlights the menu item.</summary>
        </member>
        <member name="F:PInvoke.User32.MenuItemState.MFS_UNCHECKED">
            <summary>Unchecks the menu item. For more information about clear menu items, see the hbmpChecked member.</summary>
        </member>
        <member name="F:PInvoke.User32.MenuItemState.MFS_UNHILITE">
            <summary>Removes the highlight from the menu item. This is the default state.</summary>
        </member>
        <member name="T:PInvoke.User32.MenuItemType">
            <summary>
            The menu item type in <see cref="T:PInvoke.User32.MENUITEMINFO"/>.
            </summary>
        </member>
        <member name="F:PInvoke.User32.MenuItemType.MFT_BITMAP">
            <summary>
                Displays the menu item using a bitmap. The low-order word of the <see cref="F:PInvoke.User32.MENUITEMINFO.dwTypeData" /> member is
                the bitmap handle, and the <see cref="F:PInvoke.User32.MENUITEMINFO.cch" /> member is ignored.
                <para>
                    <see cref="F:PInvoke.User32.MenuItemType.MFT_BITMAP" /> is replaced by <see cref="F:PInvoke.User32.MenuMembersMask.MIIM_BITMAP" /> and
                    <see cref="F:PInvoke.User32.MENUITEMINFO.hbmpItem" />.
                </para>
            </summary>
        </member>
        <member name="F:PInvoke.User32.MenuItemType.MFT_MENUBARBREAK">
            <summary>
                Places the menu item on a new line (for a menu bar) or in a new column (for a drop-down menu, submenu, or
                shortcut menu). For a drop-down menu, submenu, or shortcut menu, a vertical line separates the new column from the
                old.
            </summary>
        </member>
        <member name="F:PInvoke.User32.MenuItemType.MFT_MENUBREAK">
            <summary>
                Places the menu item on a new line (for a menu bar) or in a new column (for a drop-down menu, submenu, or
                shortcut menu). For a drop-down menu, submenu, or shortcut menu, the columns are not separated by a vertical line.
            </summary>
        </member>
        <member name="F:PInvoke.User32.MenuItemType.MFT_OWNERDRAW">
            <summary>
                Assigns responsibility for drawing the menu item to the window that owns the menu. The window receives a
                WM_MEASUREITEM message before the menu is displayed for the first time, and a WM_DRAWITEM message whenever the
                appearance of the menu item must be updated. If this value is specified, the dwTypeData member contains an
                application-defined value.
            </summary>
        </member>
        <member name="F:PInvoke.User32.MenuItemType.MFT_RADIOCHECK">
            <summary>
                Displays selected menu items using a radio-button mark instead of a check mark if the
                <see cref="F:PInvoke.User32.MENUITEMINFO.hbmpChecked" /> member is <see cref="F:System.IntPtr.Zero" />.
            </summary>
        </member>
        <member name="F:PInvoke.User32.MenuItemType.MFT_RIGHTJUSTIFY">
            <summary>
                Right-justifies the menu item and any subsequent items. This value is valid only if the menu item is in a menu
                bar.
            </summary>
        </member>
        <member name="F:PInvoke.User32.MenuItemType.MFT_RIGHTORDER">
            <summary>
                Specifies that menus cascade right-to-left (the default is left-to-right). This is used to support
                right-to-left languages, such as Arabic and Hebrew.
            </summary>
        </member>
        <member name="F:PInvoke.User32.MenuItemType.MFT_SEPARATOR">
            <summary>
                Specifies that the menu item is a separator. A menu item separator appears as a horizontal dividing line. The
                dwTypeData and cch members are ignored. This value is valid only in a drop-down menu, submenu, or shortcut menu.
            </summary>
        </member>
        <member name="F:PInvoke.User32.MenuItemType.MFT_STRING">
            <summary>
                Displays the menu item using a text string. The <see cref="F:PInvoke.User32.MENUITEMINFO.dwTypeData" /> member is the pointer
                to a null-terminated string, and the <see cref="F:PInvoke.User32.MENUITEMINFO.cch" /> member is the length of the string.
                <para><see cref="F:PInvoke.User32.MenuItemType.MFT_STRING" /> is replaced by <see cref="F:PInvoke.User32.MenuMembersMask.MIIM_STRING" />.</para>
            </summary>
        </member>
        <member name="T:PInvoke.User32.MenuMembersMask">
            <summary>Indicates the members to be retrieved or set in <see cref="T:PInvoke.User32.MENUITEMINFO" />.</summary>
        </member>
        <member name="F:PInvoke.User32.MenuMembersMask.MIIM_BITMAP">
            <summary>Retrieves or sets the <see cref="F:PInvoke.User32.MENUITEMINFO.hbmpItem" /> member.</summary>
        </member>
        <member name="F:PInvoke.User32.MenuMembersMask.MIIM_CHECKMARKS">
            <summary>Retrieves or sets the <see cref="F:PInvoke.User32.MENUITEMINFO.hbmpChecked" /> and <see cref="F:PInvoke.User32.MENUITEMINFO.hbmpUnchecked" />
                members.</summary>
        </member>
        <member name="F:PInvoke.User32.MenuMembersMask.MIIM_DATA">
            <summary>Retrieves or sets the <see cref="F:PInvoke.User32.MENUITEMINFO.dwItemData" /> member.</summary>
        </member>
        <member name="F:PInvoke.User32.MenuMembersMask.MIIM_FTYPE">
            <summary>Retrieves or sets the <see cref="F:PInvoke.User32.MENUITEMINFO.fType" /> member.</summary>
        </member>
        <member name="F:PInvoke.User32.MenuMembersMask.MIIM_ID">
            <summary>Retrieves or sets the <see cref="F:PInvoke.User32.MENUITEMINFO.wID" /> member.</summary>
        </member>
        <member name="F:PInvoke.User32.MenuMembersMask.MIIM_STATE">
            <summary>Retrieves or sets the <see cref="F:PInvoke.User32.MENUITEMINFO.fState" /> member.</summary>
        </member>
        <member name="F:PInvoke.User32.MenuMembersMask.MIIM_STRING">
            <summary>Retrieves or sets the <see cref="F:PInvoke.User32.MENUITEMINFO.dwTypeData" /> member.</summary>
        </member>
        <member name="F:PInvoke.User32.MenuMembersMask.MIIM_SUBMENU">
            <summary>Retrieves or sets the <see cref="F:PInvoke.User32.MENUITEMINFO.hSubMenu" /> member.</summary>
        </member>
        <member name="F:PInvoke.User32.MenuMembersMask.MIIM_TYPE">
            <summary>
                Retrieves or sets the <see cref="F:PInvoke.User32.MENUITEMINFO.fType" /> and <see cref="F:PInvoke.User32.MENUITEMINFO.dwTypeData" /> members.
                <para>MIIM_TYPE is replaced by <see cref="F:PInvoke.User32.MenuMembersMask.MIIM_BITMAP" />, <see cref="F:PInvoke.User32.MenuMembersMask.MIIM_FTYPE" />, and
                    <see cref="F:PInvoke.User32.MenuMembersMask.MIIM_STRING" />.</para>
            </summary>
        </member>
        <member name="T:PInvoke.User32.SafeDCHandle">
            <summary>
            A SafeHandle to track DC handles.
            </summary>
        </member>
        <member name="F:PInvoke.User32.SafeDCHandle.Null">
            <summary>
            A null handle.
            </summary>
        </member>
        <member name="M:PInvoke.User32.SafeDCHandle.#ctor(System.IntPtr,System.IntPtr,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:PInvoke.User32.SafeDCHandle"/> class.
            </summary>
            <param name="hWnd">The HWND this handle is associated with and must be released with.</param>
            <param name="hDC">The handle to the DC.</param>
            <param name="ownsHandle">
                <see langword="true" /> to have the native handle released when this safe handle is disposed or finalized;
                <see langword="false" /> otherwise.
            </param>
        </member>
        <member name="P:PInvoke.User32.SafeDCHandle.HWnd">
            <summary>
            Gets the HWND this handle is associated with.
            </summary>
        </member>
        <member name="P:PInvoke.User32.SafeDCHandle.IsInvalid">
            <inheritdoc />
        </member>
        <member name="M:PInvoke.User32.SafeDCHandle.ReleaseHandle">
            <inheritdoc />
        </member>
        <member name="T:PInvoke.User32.SafeHookHandle">
            <summary>
            Represents a windows Hook that can be removed with <see cref="M:PInvoke.User32.UnhookWindowsHookEx(System.IntPtr)"/>.
            </summary>
        </member>
        <member name="F:PInvoke.User32.SafeHookHandle.Null">
            <summary>
            A handle that may be used in place of <see cref="F:System.IntPtr.Zero"/>.
            </summary>
        </member>
        <member name="M:PInvoke.User32.SafeHookHandle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PInvoke.User32.SafeHookHandle"/> class.
            </summary>
        </member>
        <member name="M:PInvoke.User32.SafeHookHandle.#ctor(System.IntPtr,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:PInvoke.User32.SafeHookHandle"/> class.
            </summary>
            <param name="preexistingHandle">An object that represents the pre-existing handle to use.</param>
            <param name="ownsHandle">
                <see langword="true" /> to have the native handle released when this safe handle is disposed or finalized;
                <see langword="false" /> otherwise.
            </param>
        </member>
        <member name="P:PInvoke.User32.SafeHookHandle.IsInvalid">
            <inheritdoc />
        </member>
        <member name="M:PInvoke.User32.SafeHookHandle.ReleaseHandle">
            <inheritdoc />
        </member>
        <member name="T:PInvoke.User32.GetAncestorFlags">
            <summary>The ancestor to be retrieved by <see cref="M:PInvoke.User32.GetAncestor(System.IntPtr,PInvoke.User32.GetAncestorFlags)" />.</summary>
        </member>
        <member name="F:PInvoke.User32.GetAncestorFlags.GA_PARENT">
            <summary>Retrieves the parent window. This does not include the owner, as it does with the GetParent function.</summary>
        </member>
        <member name="F:PInvoke.User32.GetAncestorFlags.GA_ROOT">
            <summary>Retrieves the root window by walking the chain of parent windows.</summary>
        </member>
        <member name="F:PInvoke.User32.GetAncestorFlags.GA_ROOTOWNER">
            <summary>Retrieves the owned root window by walking the chain of parent and owner windows returned by GetParent.</summary>
        </member>
        <member name="F:PInvoke.User32.PrintWindowFlags.PW_FULLWINDOW">
            <summary>
                Default option. The entire window is copied to hdcBlt.
            </summary>
        </member>
        <member name="F:PInvoke.User32.PrintWindowFlags.PW_CLIENTONLY">
            <summary>
                Only the client area of the window is copied to hdcBlt.
            </summary>
            <remarks>By default, the entire window is copied.</remarks>
        </member>
        <member name="F:PInvoke.User32.SetWindowPosFlags.SWP_ASYNCWINDOWPOS">
            <summary>
                If the calling thread and the thread that owns the window are attached to different input queues, the system posts the request to the thread that owns the window. This prevents the calling thread from blocking its execution while other threads process the request.
            </summary>
        </member>
        <member name="F:PInvoke.User32.SetWindowPosFlags.SWP_DEFERERASE">
            <summary>
                Prevents generation of the WM_SYNCPAINT message.
            </summary>
        </member>
        <member name="F:PInvoke.User32.SetWindowPosFlags.SWP_DRAWFRAME">
            <summary>
                Draws a frame (defined in the window's class description) around the window.
            </summary>
        </member>
        <member name="F:PInvoke.User32.SetWindowPosFlags.SWP_FRAMECHANGED">
            <summary>
                Applies new frame styles set using the SetWindowLong function. Sends a WM_NCCALCSIZE message to the window, even if the window's size is not being changed. If this flag is not specified, WM_NCCALCSIZE is sent only when the window's size is being changed.
            </summary>
        </member>
        <member name="F:PInvoke.User32.SetWindowPosFlags.SWP_HIDEWINDOW">
            <summary>
                Hides the window.
            </summary>
        </member>
        <member name="F:PInvoke.User32.SetWindowPosFlags.SWP_NOACTIVATE">
            <summary>
                Does not activate the window. If this flag is not set, the window is activated and moved to the top of either the topmost or non-topmost group (depending on the setting of the hWndInsertAfter parameter).
            </summary>
        </member>
        <member name="F:PInvoke.User32.SetWindowPosFlags.SWP_NOCOPYBITS">
            <summary>
                Discards the entire contents of the client area. If this flag is not specified, the valid contents of the client area are saved and copied back into the client area after the window is sized or repositioned.
            </summary>
        </member>
        <member name="F:PInvoke.User32.SetWindowPosFlags.SWP_NOMOVE">
            <summary>
                Retains the current position (ignores X and Y parameters).
            </summary>
        </member>
        <member name="F:PInvoke.User32.SetWindowPosFlags.SWP_NOOWNERZORDER">
            <summary>
                Does not change the owner window's position in the Z order.
            </summary>
        </member>
        <member name="F:PInvoke.User32.SetWindowPosFlags.SWP_NOREDRAW">
            <summary>
                Does not redraw changes. If this flag is set, no repainting of any kind occurs. This applies to the client area, the nonclient area (including the title bar and scroll bars), and any part of the parent window uncovered as a result of the window being moved. When this flag is set, the application must explicitly invalidate or redraw any parts of the window and parent window that need redrawing.
            </summary>
        </member>
        <member name="F:PInvoke.User32.SetWindowPosFlags.SWP_NOREPOSITION">
            <summary>
                Same as the SWP_NOOWNERZORDER flag.
            </summary>
        </member>
        <member name="F:PInvoke.User32.SetWindowPosFlags.SWP_NOSENDCHANGING">
            <summary>
                Prevents the window from receiving the WM_WINDOWPOSCHANGING message.
            </summary>
        </member>
        <member name="F:PInvoke.User32.SetWindowPosFlags.SWP_NOSIZE">
            <summary>
                Retains the current size (ignores the cx and cy parameters).
            </summary>
        </member>
        <member name="F:PInvoke.User32.SetWindowPosFlags.SWP_NOZORDER">
            <summary>
                Retains the current Z order (ignores the hWndInsertAfter parameter).
            </summary>
        </member>
        <member name="F:PInvoke.User32.SetWindowPosFlags.SWP_SHOWWINDOW">
            <summary>
                Displays the window.
            </summary>
        </member>
        <member name="T:PInvoke.User32.WindowsHookType">
            <summary>The type of hook procedure to be installed by <see cref="M:PInvoke.User32.SetWindowsHookEx(PInvoke.User32.WindowsHookType,System.IntPtr,System.IntPtr,System.Int32)" />.</summary>
        </member>
        <member name="F:PInvoke.User32.WindowsHookType.WH_MSGFILTER">
            <summary>
                Installs a hook procedure that monitors messages generated as a result of an input event in a dialog box,
                message box, menu, or scroll bar.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowsHookType.WH_JOURNALRECORD">
            <summary>
                Installs a hook procedure that records input messages posted to the system message queue. This hook is useful
                for recording macros.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowsHookType.WH_JOURNALPLAYBACK">
            <summary>Installs a hook procedure that posts messages previously recorded by a WH_JOURNALRECORD hook procedure.</summary>
        </member>
        <member name="F:PInvoke.User32.WindowsHookType.WH_KEYBOARD">
            <summary>Installs a hook procedure that monitors keystroke messages.</summary>
        </member>
        <member name="F:PInvoke.User32.WindowsHookType.WH_GETMESSAGE">
            <summary>Installs a hook procedure that monitors messages posted to a message queue.</summary>
        </member>
        <member name="F:PInvoke.User32.WindowsHookType.WH_CALLWNDPROC">
            <summary>
                Installs a hook procedure that monitors messages before the system sends them to the destination window
                procedure.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowsHookType.WH_CBT">
            <summary>Installs a hook procedure that receives notifications useful to a CBT application.</summary>
        </member>
        <member name="F:PInvoke.User32.WindowsHookType.WH_SYSMSGFILTER">
            <summary>
                nstalls a hook procedure that monitors messages generated as a result of an input event in a dialog box,
                message box, menu, or scroll bar. The hook procedure monitors these messages for all applications in the same
                desktop as the calling thread.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowsHookType.WH_MOUSE">
            <summary>Installs a hook procedure that monitors mouse messages.</summary>
        </member>
        <member name="F:PInvoke.User32.WindowsHookType.WH_DEBUG">
            <summary>Installs a hook procedure useful for debugging other hook procedures.</summary>
        </member>
        <member name="F:PInvoke.User32.WindowsHookType.WH_SHELL">
            <summary>Installs a hook procedure that receives notifications useful to shell applications.</summary>
        </member>
        <member name="F:PInvoke.User32.WindowsHookType.WH_FOREGROUNDIDLE">
            <summary>
                Installs a hook procedure that will be called when the application's foreground thread is about to become
                idle. This hook is useful for performing low priority tasks during idle time.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowsHookType.WH_CALLWNDPROCRET">
            <summary>
                Installs a hook procedure that monitors messages after they have been processed by the destination window
                procedure.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowsHookType.WH_KEYBOARD_LL">
            <summary>Installs a hook procedure that monitors low-level keyboard input events.</summary>
        </member>
        <member name="F:PInvoke.User32.WindowsHookType.WH_MOUSE_LL">
            <summary>Installs a hook procedure that monitors low-level mouse input events.</summary>
        </member>
        <member name="T:PInvoke.User32.WindowShowStyle">
            <summary>Enumeration of the different ways of showing a window using
            ShowWindow</summary>
        </member>
        <member name="F:PInvoke.User32.WindowShowStyle.SW_HIDE">
            <summary>Hides the window and activates another window.</summary>
        </member>
        <member name="F:PInvoke.User32.WindowShowStyle.SW_SHOWNORMAL">
            <summary>Activates and displays a window. If the window is minimized
            or maximized, the system restores it to its original size and
            position. An application should specify this flag when displaying
            the window for the first time.</summary>
        </member>
        <member name="F:PInvoke.User32.WindowShowStyle.SW_SHOWMINIMIZED">
            <summary>Activates the window and displays it as a minimized window.</summary>
        </member>
        <member name="F:PInvoke.User32.WindowShowStyle.SW_SHOWMAXIMIZED">
            <summary>Activates the window and displays it as a maximized window.</summary>
        </member>
        <member name="F:PInvoke.User32.WindowShowStyle.SW_MAXIMIZE">
            <summary>Maximizes the specified window.</summary>
        </member>
        <member name="F:PInvoke.User32.WindowShowStyle.SW_SHOWNOACTIVATE">
            <summary>Displays a window in its most recent size and position.
            This value is similar to "ShowNormal", except the window is not
            actived.</summary>
        </member>
        <member name="F:PInvoke.User32.WindowShowStyle.SW_SHOW">
            <summary>Activates the window and displays it in its current size
            and position.</summary>
        </member>
        <member name="F:PInvoke.User32.WindowShowStyle.SW_MINIMIZE">
            <summary>Minimizes the specified window and activates the next
            top-level window in the Z order.</summary>
        </member>
        <member name="F:PInvoke.User32.WindowShowStyle.SW_SHOWMINNOACTIVE">
            <summary>Displays the window as a minimized window. This value is
            similar to "ShowMinimized", except the window is not activated.</summary>
        </member>
        <member name="F:PInvoke.User32.WindowShowStyle.SW_SHOWNA">
            <summary>Displays the window in its current size and position. This
            value is similar to "Show", except the window is not activated.</summary>
        </member>
        <member name="F:PInvoke.User32.WindowShowStyle.SW_RESTORE">
            <summary>Activates and displays the window. If the window is
            minimized or maximized, the system restores it to its original size
            and position. An application should specify this flag when restoring
            a minimized window.</summary>
        </member>
        <member name="F:PInvoke.User32.WindowShowStyle.SW_SHOWDEFAULT">
            <summary>Sets the show state based on the SW_ value specified in the
            STARTUPINFO structure passed to the CreateProcess function by the
            program that started the application.</summary>
        </member>
        <member name="F:PInvoke.User32.WindowShowStyle.SW_FORCEMINIMIZE">
            <summary>Windows 2000/XP: Minimizes a window, even if the thread
            that owns the window is hung. This flag should only be used when
            minimizing windows from a different thread.</summary>
        </member>
        <member name="F:PInvoke.User32.WHEEL_DELTA">
            <summary>
            The multiplicative constant 120 for calculating mouse wheel movement.
            </summary>
            <remarks>
            See https://msdn.microsoft.com/en-us/library/windows/desktop/ms646254(v=vs.85).aspx
            </remarks>
        </member>
        <member name="F:PInvoke.User32.HBMMENU_CALLBACK">
            <summary>
                A bitmap that is drawn by the window that owns the menu. The application must process the WM_MEASUREITEM and
                WM_DRAWITEM messages.
            </summary>
        </member>
        <member name="F:PInvoke.User32.HBMMENU_MBAR_CLOSE">
            <summary>Close button for the menu bar.</summary>
        </member>
        <member name="F:PInvoke.User32.HBMMENU_MBAR_CLOSE_D">
            <summary>Disabled close button for the menu bar.</summary>
        </member>
        <member name="F:PInvoke.User32.HBMMENU_MBAR_MINIMIZE">
            <summary>Minimize button for the menu bar.</summary>
        </member>
        <member name="F:PInvoke.User32.HBMMENU_MBAR_MINIMIZE_D">
            <summary>Disabled minimize button for the menu bar.</summary>
        </member>
        <member name="F:PInvoke.User32.HBMMENU_MBAR_RESTORE">
            <summary>Restore button for the menu bar.</summary>
        </member>
        <member name="F:PInvoke.User32.HBMMENU_POPUP_CLOSE">
            <summary>Close button for the submenu.</summary>
        </member>
        <member name="F:PInvoke.User32.HBMMENU_POPUP_MAXIMIZE">
            <summary>Maximize button for the submenu.</summary>
        </member>
        <member name="F:PInvoke.User32.HBMMENU_POPUP_MINIMIZE">
            <summary>Minimize button for the submenu.</summary>
        </member>
        <member name="F:PInvoke.User32.HBMMENU_POPUP_RESTORE">
            <summary>Restore button for the submenu.</summary>
        </member>
        <member name="F:PInvoke.User32.HBMMENU_SYSTEM">
            <summary>Windows icon or the icon of the window specified in <see cref="F:PInvoke.User32.MENUITEMINFO.dwItemData" />.</summary>
        </member>
        <member name="M:PInvoke.User32.MessageBeep(PInvoke.User32.MessageBeepType)">
            <summary>
            Plays a waveform sound. The waveform sound for each sound type is identified by an entry in the registry.
            </summary>
            <param name="uType">The sound to be played. The sounds are set by the user through the Sound control panel application, and then stored in the registry.</param>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
        </member>
        <member name="M:PInvoke.User32.GetClassName(System.IntPtr,System.Char*,System.Int32)">
            <summary>
            Retrieves the name of the class to which the specified window belongs.
            </summary>
            <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
            <param name="lpClassName">The class name string.</param>
            <param name="nMaxCount">
            The length of the <paramref name="lpClassName"/> buffer, in characters. The buffer must be large enough to include the terminating null character; otherwise, the class name string is truncated to <paramref name="nMaxCount"/>-1 characters.
            </param>
            <returns>
            If the function succeeds, the return value is the number of characters copied to the buffer, not including the terminating null character.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
        </member>
        <member name="M:PInvoke.User32.ReleaseDC(System.IntPtr,System.IntPtr)">
            <summary>
            The ReleaseDC function releases a device context (DC), freeing it for use by other applications. The effect of the ReleaseDC function depends on the type of DC. It frees only common and window DCs. It has no effect on class or private DCs.
            </summary>
            <param name="hWnd">A handle to the window whose DC is to be released.</param>
            <param name="hDC">A handle to the DC to be released.</param>
            <returns>
            The return value indicates whether the DC was released. If the DC was released, the return value is 1.
            If the DC was not released, the return value is zero.
            </returns>
        </member>
        <member name="M:PInvoke.User32.FindWindow(System.String,System.String)">
            <summary>
            Retrieves a handle to the top-level window whose class name and window name match the specified strings. This function does not search child windows. This function does not perform a case-sensitive search. To search child windows, beginning with a specified child window, use the FindWindowEx function.
            </summary>
            <param name="lpClassName">The window class name. If lpClassName is NULL, it finds any window whose title matches the lpWindowName parameter. </param>
            <param name="lpWindowName">The window name (the window's title). If this parameter is NULL, all window names match.</param>
            <returns>If the function succeeds, the return value is a handle to the window that has the specified
             class name and window name. If the function fails, the return value is NULL.</returns>
        </member>
        <member name="M:PInvoke.User32.GetDesktopWindow">
            <summary>
            Retrieves a handle to the desktop window. The desktop window covers the entire screen. The desktop window is the area on top of which other windows are painted.
            </summary>
            <returns>The return value is a handle to the desktop window.</returns>
        </member>
        <member name="M:PInvoke.User32.SendMessage(System.IntPtr,PInvoke.User32.WindowMessage,System.Void*,System.Void*)">
            <summary>
            Sends the specified message to a window or windows. The SendMessage function calls the window procedure for the specified window and does not return until the window procedure has processed the message.
            To send a message and return immediately, use the SendMessageCallback or SendNotifyMessage function. To post a message to a thread's message queue and return immediately, use the PostMessage or PostThreadMessage function.
            </summary>
            <param name="hWnd">
            A handle to the window whose window procedure will receive the message. If this parameter is HWND_BROADCAST ((HWND)0xffff), the message is sent to all top-level windows in the system, including disabled or invisible unowned windows, overlapped windows, and pop-up windows; but the message is not sent to child windows.
            Message sending is subject to UIPI. The thread of a process can send messages only to message queues of threads in processes of lesser or equal integrity level.
            </param>
            <param name="wMsg">
            The message to be sent.
            For lists of the system-provided messages, see <see cref="T:PInvoke.User32.WindowMessage"/>.
            </param>
            <param name="wParam">Additional message-specific information.</param>
            <param name="lParam">Additional message-specific information.</param>
            <returns>The return value specifies the result of the message processing; it depends on the message sent.</returns>
        </member>
        <member name="M:PInvoke.User32.PostMessage(System.IntPtr,PInvoke.User32.WindowMessage,System.Void*,System.Void*)">
            <summary>
            Places (posts) a message in the message queue associated with the thread that created the specified window and returns without waiting for the thread to process the message.
            To post a message in the message queue associated with a thread, use the PostThreadMessage function.
            </summary>
            <param name="hWnd">
            A handle to the window whose window procedure is to receive the message.
            </param>
            <param name="wMsg">
            The message to be posted.
            For lists of the system-provided messages, see <see cref="T:PInvoke.User32.WindowMessage"/>.
            </param>
            <param name="wParam">Additional message-specific information.</param>
            <param name="lParam">Additional message-specific information.</param>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError. GetLastError returns ERROR_NOT_ENOUGH_QUOTA when the limit is hit.
            </returns>
        </member>
        <member name="M:PInvoke.User32.SetForegroundWindow(System.IntPtr)">
            <summary>
                Brings the thread that created the specified window into the foreground and activates the window. Keyboard
                input is directed to the window, and various visual cues are changed for the user. The system assigns a slightly
                higher priority to the thread that created the foreground window than it does to other threads.
            </summary>
            <param name="hWnd">A handle to the window that should be activated and brought to the foreground.</param>
            <returns>
                If the window was brought to the foreground, the return value is true.
                <para>If the window was not brought to the foreground, the return value is false.</para>
            </returns>
        </member>
        <member name="M:PInvoke.User32.GetAncestor(System.IntPtr,PInvoke.User32.GetAncestorFlags)">
            <summary>Retrieves the handle to the ancestor of the specified window.</summary>
            <param name="hWnd">
                A handle to the window whose ancestor is to be retrieved. If this parameter is the desktop window,
                the function returns <see cref="F:System.IntPtr.Zero" />.
            </param>
            <param name="gaFlags">The ancestor to be retrieved.</param>
            <returns>The handle to the ancestor window.</returns>
        </member>
        <member name="M:PInvoke.User32.SetWindowsHookEx(PInvoke.User32.WindowsHookType,PInvoke.User32.WindowsHookDelegate,System.IntPtr,System.Int32)">
            <summary>
                Installs an application-defined hook procedure into a hook chain. You would install a hook procedure to
                monitor the system for certain types of events. These events are associated either with a specific thread or with
                all threads in the same desktop as the calling thread.
            </summary>
            <param name="idHook">The type of hook procedure to be installed.</param>
            <param name="lpfn">
                A pointer to the hook procedure. If the <paramref name="dwThreadId" /> parameter is zero or
                specifies the identifier of a thread created by a different process, the <paramref name="lpfn" /> parameter must
                point to a hook procedure in a DLL. Otherwise, <paramref name="lpfn" /> can point to a hook procedure in the code
                associated with the current process.
            </param>
            <param name="hMod">
                A handle to the DLL containing the hook procedure pointed to by the <paramref name="lpfn" />
                parameter. The <paramref name="hMod" /> parameter must be set to <see cref="F:System.IntPtr.Zero" /> if the
                <paramref name="dwThreadId" /> parameter specifies a thread created by the current process and if the hook
                procedure is within the code associated with the current process.
            </param>
            <param name="dwThreadId">
                The identifier of the thread with which the hook procedure is to be associated. For desktop
                apps, if this parameter is zero, the hook procedure is associated with all existing threads running in the same
                desktop as the calling thread. For Windows Store apps, see the Remarks section.
            </param>
            <returns>
                If the function succeeds, the return value is the handle to the hook procedure.
                <para>
                    If the function fails, the return value is an invalid handle. To get extended error information,
                    call GetLastError.
                </para>
            </returns>
        </member>
        <member name="M:PInvoke.User32.SetWindowsHookEx(PInvoke.User32.WindowsHookType,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
                Installs an application-defined hook procedure into a hook chain. You would install a hook procedure to
                monitor the system for certain types of events. These events are associated either with a specific thread or with
                all threads in the same desktop as the calling thread.
            </summary>
            <param name="idHook">The type of hook procedure to be installed.</param>
            <param name="lpfn">
                A pointer to the hook procedure. If the <paramref name="dwThreadId" /> parameter is zero or
                specifies the identifier of a thread created by a different process, the <paramref name="lpfn" /> parameter must
                point to a hook procedure in a DLL. Otherwise, <paramref name="lpfn" /> can point to a hook procedure in the code
                associated with the current process.
            </param>
            <param name="hMod">
                A handle to the DLL containing the hook procedure pointed to by the <paramref name="lpfn" />
                parameter. The <paramref name="hMod" /> parameter must be set to <see cref="F:System.IntPtr.Zero" /> if the
                <paramref name="dwThreadId" /> parameter specifies a thread created by the current process and if the hook
                procedure is within the code associated with the current process.
            </param>
            <param name="dwThreadId">
                The identifier of the thread with which the hook procedure is to be associated. For desktop
                apps, if this parameter is zero, the hook procedure is associated with all existing threads running in the same
                desktop as the calling thread. For Windows Store apps, see the Remarks section.
            </param>
            <returns>
                If the function succeeds, the return value is the handle to the hook procedure.
                <para>
                    If the function fails, the return value is an invalid handle. To get extended error information,
                    call GetLastError.
                </para>
            </returns>
        </member>
        <member name="M:PInvoke.User32.CallNextHookEx(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
                Passes the hook information to the next hook procedure in the current hook chain. A hook procedure can call
                this function either before or after processing the hook information.
            </summary>
            <param name="hhk">This parameter is ignored.</param>
            <param name="nCode">
                The hook code passed to the current hook procedure. The next hook procedure uses this code to
                determine how to process the hook information.
            </param>
            <param name="wParam">
                The wParam value passed to the current hook procedure. The meaning of this parameter depends on
                the type of hook associated with the current hook chain.
            </param>
            <param name="lParam">
                The lParam value passed to the current hook procedure. The meaning of this parameter depends on
                the type of hook associated with the current hook chain.
            </param>
            <returns>
                This value is returned by the next hook procedure in the chain. The current hook procedure must also return
                this value. The meaning of the return value depends on the hook type. For more information, see the descriptions of
                the individual hook procedures.
            </returns>
        </member>
        <member name="M:PInvoke.User32.SetCapture(System.IntPtr)">
            <summary>
                Sets the mouse capture to the specified window belonging to the current thread.SetCapture captures mouse input
                either when the mouse is over the capturing window, or when the mouse button was pressed while the mouse was over
                the capturing window and the button is still down. Only one window at a time can capture the mouse.
                <para>
                    If the mouse cursor is over a window created by another thread, the system will direct mouse input to the
                    specified window only if a mouse button is down.
                </para>
            </summary>
            <param name="hWnd">A handle to the window in the current thread that is to capture the mouse.</param>
            <returns>
                The return value is a handle to the window that had previously captured the mouse. If there is no such window,
                the return value is <see cref="F:System.IntPtr.Zero" />.
            </returns>
        </member>
        <member name="M:PInvoke.User32.ReleaseCapture">
            <summary>
                Releases the mouse capture from a window in the current thread and restores normal mouse input processing. A
                window that has captured the mouse receives all mouse input, regardless of the position of the cursor, except when
                a mouse button is clicked while the cursor hot spot is in the window of another thread.
            </summary>
            <returns>
                If the function succeeds, the return value is true.
                <para>If the function fails, the return value is false. To get extended error information, call GetLastError.</para>
            </returns>
        </member>
        <member name="M:PInvoke.User32.FlashWindowEx(PInvoke.User32.FLASHWINFO@)">
            <summary>Flashes the specified window. It does not change the active state of the window.</summary>
            <param name="pwfi">A pointer to a <see cref="T:PInvoke.User32.FLASHWINFO" /> structure.</param>
            <returns>
                The return value specifies the window's state before the call to the FlashWindowEx function. If the window
                caption was drawn as active before the call, the return value is nonzero. Otherwise, the return value is zero.
            </returns>
        </member>
        <member name="M:PInvoke.User32.GetSystemMenu(System.IntPtr,System.Boolean)">
            <summary>
                Enables the application to access the window menu (also known as the system menu or the control menu) for
                copying and modifying.
            </summary>
            <param name="hWnd">A handle to the window that will own a copy of the window menu.</param>
            <param name="bRevert">
                The action to be taken. If this parameter is FALSE, GetSystemMenu returns a handle to the copy of
                the window menu currently in use. The copy is initially identical to the window menu, but it can be modified. If
                this parameter is TRUE, GetSystemMenu resets the window menu back to the default state. The previous window menu,
                if any, is destroyed.
            </param>
            <returns>
                If the bRevert parameter is FALSE, the return value is a handle to a copy of the window menu. If the bRevert
                parameter is TRUE, the return value is NULL.
            </returns>
        </member>
        <member name="M:PInvoke.User32.AppendMenu(System.IntPtr,PInvoke.User32.MenuItemFlags,System.IntPtr,System.String)">
            <summary>
                Appends a new item to the end of the specified menu bar, drop-down menu, submenu, or shortcut menu. You can
                use this function to specify the content, appearance, and behavior of the menu item.
            </summary>
            <param name="hMenu">A handle to the menu bar, drop-down menu, submenu, or shortcut menu to be changed.</param>
            <param name="uFlags">Controls the appearance and behavior of the new menu item</param>
            <param name="uIdNewItem">
                The identifier of the new menu item or, if the uFlags parameter is set to
                <see cref="F:PInvoke.User32.MenuItemFlags.MF_POPUP" />, a handle to the drop-down menu or submenu.
            </param>
            <param name="lpNewItem">
                The content of the new menu item. The interpretation of lpNewItem depends on whether the uFlags parameter includes
                the following values.
                <para><see cref="F:PInvoke.User32.MenuItemFlags.MF_BITMAP" />: Contains a bitmap handle.</para>
                <para>
                    <see cref="F:PInvoke.User32.MenuItemFlags.MF_OWNERDRAW" />: Contains an application-supplied value that can be used to
                    maintain additional data related to the menu item. The value is in the itemData member of the structure pointed
                    to by the lParam parameter of the WM_MEASUREITEM or WM_DRAWITEM message sent when the menu is created or its
                    appearance is updated.
                </para>
                <para><see cref="F:PInvoke.User32.MenuItemFlags.MF_STRING" />: Contains a pointer to a null-terminated string.</para>
            </param>
            <returns>
                If the function succeeds, the return value is true.
                <para>If the function fails, the return value is false. To get extended error information, call GetLastError.</para>
            </returns>
        </member>
        <member name="M:PInvoke.User32.SetMenuItemInfo(System.IntPtr,System.UInt32,System.Boolean,PInvoke.User32.MENUITEMINFO@)">
            <summary>Changes information about a menu item.</summary>
            <param name="hMenu">A handle to the menu that contains the menu item.</param>
            <param name="uItem">
                The identifier or position of the menu item to change. The meaning of this parameter depends on the
                value of <paramref name="fByPosition" />.
            </param>
            <param name="fByPosition">
                The meaning of uItem. If this parameter is FALSE, uItem is a menu item identifier. Otherwise,
                it is a menu item position.
            </param>
            <param name="lpmii">
                A <see cref="T:PInvoke.User32.MENUITEMINFO" /> structure that contains information about the menu item and specifies
                which menu item attributes to change.
            </param>
            <returns>
                If the function succeeds, the return value is true.
                <para>If the function fails, the return value is false. To get extended error information, call GetLastError.</para>
            </returns>
        </member>
        <member name="M:PInvoke.User32.GetMenuItemInfo(System.IntPtr,System.UInt32,System.Boolean,PInvoke.User32.MENUITEMINFO@)">
            <summary>Retrieves information about a menu item.</summary>
            <param name="hMenu">A handle to the menu that contains the menu item.</param>
            <param name="uItem">
                The identifier or position of the menu item to get information about. The meaning of this parameter
                depends on the value of <paramref name="fByPosition" />.
            </param>
            <param name="fByPosition">
                The meaning of <paramref name="uItem" />. If this parameter is FALSE,
                <paramref name="uItem" /> is a menu item identifier. Otherwise, it is a menu item position.
            </param>
            <param name="lpmii">
                A <see cref="T:PInvoke.User32.MENUITEMINFO" /> structure that specifies the information to retrieve and receives
                information about the menu item. Note that you must set the cbSize member to <code>sizeof(MENUITEMINFO)</code>
                before calling this function (Either manually or by using <see cref="M:PInvoke.User32.MENUITEMINFO.Create" />).
            </param>
            <returns>
                If the function succeeds, the return value is true.
                <para>If the function fails, the return value is false. To get extended error information, call GetLastError.</para>
            </returns>
        </member>
        <member name="M:PInvoke.User32.MapVirtualKey(System.Int32,PInvoke.User32.MapVirtualKeyTranslation)">
            <summary>
                Translates (maps) a virtual-key code into a scan code or character value, or translates a scan code into a
                virtual-key code.
                <para>
                    To specify a handle to the keyboard layout to use for translating the specified code, use the MapVirtualKeyEx
                    function.
                </para>
            </summary>
            <param name="uCode">
                The virtual key code or scan code for a key. How this value is interpreted depends on the value of
                the uMapType parameter.
            </param>
            <param name="uMapType">
                The translation to be performed. The value of this parameter depends on the value of the uCode
                parameter.
            </param>
            <returns>
                The return value is either a scan code, a virtual-key code, or a character value, depending on the value of
                <paramref name="uCode" /> and <paramref name="uMapType" />. If there is no translation, the return value is zero.
            </returns>
        </member>
        <member name="M:PInvoke.User32.GetActiveWindow">
            <summary>Retrieves the window handle to the active window attached to the calling thread's message queue.</summary>
            <returns>
                The return value is the handle to the active window attached to the calling thread's message queue. Otherwise,
                the return value is <see cref="F:System.IntPtr.Zero" />.
            </returns>
        </member>
        <member name="M:PInvoke.User32.LookupIconIdFromDirectory(System.Byte*,System.Boolean)">
            <summary>
            Searches through icon or cursor data for the icon or cursor that best fits the current display device.
            To specify a desired height or width, use the LookupIconIdFromDirectoryEx function.
            </summary>
            <param name="presbits">
            The icon or cursor directory data. Because this function does not validate the resource data, it causes a general protection (GP) fault or returns an undefined value if <paramref name="presbits"/> is not pointing to valid resource data.
            </param>
            <param name="fIcon">
            Indicates whether an icon or a cursor is sought. If this parameter is TRUE, the function is searching for an icon; if the parameter is FALSE, the function is searching for a cursor.
            </param>
            <returns>
            If the function succeeds, the return value is an integer resource identifier for the icon or cursor that best fits the current display device.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
        </member>
        <member name="M:PInvoke.User32.LookupIconIdFromDirectoryEx(System.Byte*,System.Boolean,System.Int32,System.Int32,PInvoke.User32.LookupIconIdFromDirectoryExFlags)">
            <summary>
            Searches through icon or cursor data for the icon or cursor that best fits the current display device.
            To specify a desired height or width, use the LookupIconIdFromDirectoryEx function.
            </summary>
            <param name="presbits">
            The icon or cursor directory data. Because this function does not validate the resource data, it causes a general protection (GP) fault or returns an undefined value if <paramref name="presbits"/> is not pointing to valid resource data.
            </param>
            <param name="fIcon">
            Indicates whether an icon or a cursor is sought. If this parameter is TRUE, the function is searching for an icon; if the parameter is FALSE, the function is searching for a cursor.
            </param>
            <param name="cxDesired">The desired width, in pixels, of the icon. If this parameter is zero, the function uses the SM_CXICON or SM_CXCURSOR system metric value.</param>
            <param name="cyDesired">The desired height, in pixels, of the icon. If this parameter is zero, the function uses the SM_CYICON or SM_CYCURSOR system metric value.</param>
            <param name="Flags">A combination of the following values.</param>
            <returns>
            If the function succeeds, the return value is an integer resource identifier for the icon or cursor that best fits the current display device.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
        </member>
        <member name="M:PInvoke.User32.GetClipboardFormatName(System.Int32,System.Char*,System.Int32)">
            <summary>
            Retrieves the name of the format from the clipboard.
            </summary>
            <param name="format">The type of format to be retrieved. This parameter must not specify any of the predefined clipboard formats.</param>
            <param name="lpszFormatName">The format name string.</param>
            <param name="nMaxCount">
            The length of the <paramref name="lpszFormatName"/> buffer, in characters. The buffer must be large enough to include the terminating null character; otherwise, the format name string is truncated to <paramref name="nMaxCount"/>-1 characters.
            </param>
            <returns>
            If the function succeeds, the return value is the number of characters copied to the buffer.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
        </member>
        <member name="M:PInvoke.User32.SendInput(System.Int32,PInvoke.User32.INPUT*,System.Int32)">
            <summary>
            Synthesizes keystrokes, mouse motions, and button clicks.
            </summary>
            <param name="nInputs">The number of structures in the <paramref name="pInputs" /> array.</param>
            <param name="pInputs">An array of  structures. Each structure represents an event to be inserted into the keyboard or mouse input stream.</param>
            <param name="cbSize">The size, in bytes, of an <see cref="T:PInvoke.User32.INPUT" /> structure. If cbSize is not the size of an <see cref="T:PInvoke.User32.INPUT" /> structure, the function fails.</param>
            <returns>
            The function returns the number of events that it successfully inserted into the keyboard or mouse input stream.
            If the function returns zero, the input was already blocked by another thread. To get extended error information, call GetLastError.
            </returns>
            <remarks>
            This function is subject to UIPI. Applications are permitted to inject input only into applications that are at an equal or lesser integrity level.
            This function fails when it is blocked by UIPI. Note that neither GetLastError nor the return value will indicate the failure was caused by UIPI blocking.
            </remarks>
        </member>
        <member name="M:PInvoke.User32.WaitForInputIdle(System.IntPtr,System.Int32)">
            <summary>
            Waits until the specified process has finished processing its initial input and is waiting for user input with no input pending, or until the time-out interval has elapsed.
            </summary>
            <param name="hProcess">A handle to the process. If this process is a console application or does not have a message queue, WaitForInputIdle returns immediately.</param>
            <param name="dwMilliseconds">The time-out interval, in milliseconds. If dwMilliseconds is INFINITE, the function does not return until the process is idle.</param>
            <returns>0 if the wait was satisfied successfully., WAIT_TIMEOUT if the wait was terminated because the time-out interval elapsed, and WAIT_FAILED if an error occurred.</returns>
            <remarks>Raymond Chen has a series of articles that give a bit more depth to how this function was intended to be used.
            <a href="http://blogs.msdn.com/b/oldnewthing/archive/2010/03/25/9984720.aspx">Here</a> and <a href="http://blogs.msdn.com/b/oldnewthing/archive/2010/03/26/9985422.aspx">here</a>.
            The jist of it is that this function should have been really called WaitForProcessStartupComplete, as this is all it does.</remarks>
        </member>
        <member name="M:PInvoke.User32.GetDC_IntPtr(System.IntPtr)">
            <summary>
            The GetDC function retrieves a handle to a device context (DC) for the client area of a specified window or for the entire screen. You can use the returned handle in subsequent GDI functions to draw in the DC. The device context is an opaque data structure, whose values are used internally by GDI.
            The GetDCEx function is an extension to GetDC, which gives an application more control over how and whether clipping occurs in the client area.
            </summary>
            <param name="hWnd">A handle to the window whose DC is to be retrieved. If this value is NULL, GetDC retrieves the DC for the entire screen.</param>
            <returns>
            If the function succeeds, the return value is a handle to the DC for the specified window's client area.
            If the function fails, the return value is NULL.
            </returns>
        </member>
        <member name="M:PInvoke.User32.UnhookWindowsHookEx(System.IntPtr)">
            <summary>
                Removes a hook procedure installed in a hook chain by the
                <see cref="M:PInvoke.User32.SetWindowsHookEx(PInvoke.User32.WindowsHookType,System.IntPtr,System.IntPtr,System.Int32)" /> function.
            </summary>
            <param name="hhk">
                A handle to the hook to be removed. This parameter is a hook handle obtained by a previous call to
                <see cref="M:PInvoke.User32.SetWindowsHookEx(PInvoke.User32.WindowsHookType,System.IntPtr,System.IntPtr,System.Int32)" />.
            </param>
            <returns>
                If the function succeeds, the return value is true.
                <para>If the function fails, the return value is false. To get extended error information, call GetLastError.</para>
            </returns>
        </member>
        <member name="M:PInvoke.User32.GetDC(System.IntPtr)">
            <summary>
            The GetDC function retrieves a handle to a device context (DC) for the client area of a specified window or for the entire screen. You can use the returned handle in subsequent GDI functions to draw in the DC. The device context is an opaque data structure, whose values are used internally by GDI.
            The GetDCEx function is an extension to GetDC, which gives an application more control over how and whether clipping occurs in the client area.
            </summary>
            <param name="hWnd">A handle to the window whose DC is to be retrieved. If this value is NULL, GetDC retrieves the DC for the entire screen.</param>
            <returns>
            If the function succeeds, the return value is a handle to the DC for the specified window's client area.
            If the function fails, the return value is NULL.
            </returns>
        </member>
        <member name="M:PInvoke.User32.GetClassName(System.IntPtr,System.Int32)">
            <summary>
            Retrieves the name of the class to which the specified window belongs.
            </summary>
            <param name = "hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
            <param name="maxLength">The size of the string to return</param>
            <returns>The class name string.</returns>
            <exception cref="T:System.ComponentModel.Win32Exception">Thrown when an error occurs.</exception>
            <remarks>The suggested class name length is 256 as we didn't find any reference of class name length limits</remarks>
        </member>
        <member name="M:PInvoke.User32.GetClipboardFormatName(System.Int32)">
            <summary>
            Retrieves from the clipboard the name of the specified registered format.
            </summary>
            <param name = "format">The type of format to be retrieved. This parameter must not specify any of the predefined clipboard formats.</param>
            <returns>The format name string.</returns>
            <exception cref="T:System.ComponentModel.Win32Exception">Thrown when an error occurs.</exception>
        </member>
        <member name="M:PInvoke.User32.GetClassName(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            Retrieves the name of the class to which the specified window belongs.
            </summary>
            <param name = "hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
            <param name = "lpClassName">The class name string.</param>
            <param name = "nMaxCount">
            The length of the <paramref name = "lpClassName"/> buffer, in characters. The buffer must be large enough to include the terminating null character; otherwise, the class name string is truncated to <paramref name = "nMaxCount"/>-1 characters.
            </param>
            <returns>
            If the function succeeds, the return value is the number of characters copied to the buffer, not including the terminating null character.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
        </member>
        <member name="M:PInvoke.User32.GetClassName(System.IntPtr,System.Char[],System.Int32)">
            <summary>
            Retrieves the name of the class to which the specified window belongs.
            </summary>
            <param name = "hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
            <param name = "lpClassName">The class name string.</param>
            <param name = "nMaxCount">
            The length of the <paramref name = "lpClassName"/> buffer, in characters. The buffer must be large enough to include the terminating null character; otherwise, the class name string is truncated to <paramref name = "nMaxCount"/>-1 characters.
            </param>
            <returns>
            If the function succeeds, the return value is the number of characters copied to the buffer, not including the terminating null character.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
        </member>
        <member name="M:PInvoke.User32.SendMessage(System.IntPtr,PInvoke.User32.WindowMessage,System.IntPtr,System.IntPtr)">
            <summary>
            Sends the specified message to a window or windows. The SendMessage function calls the window procedure for the specified window and does not return until the window procedure has processed the message.
            To send a message and return immediately, use the SendMessageCallback or SendNotifyMessage function. To post a message to a thread's message queue and return immediately, use the PostMessage or PostThreadMessage function.
            </summary>
            <param name = "hWnd">
            A handle to the window whose window procedure will receive the message. If this parameter is HWND_BROADCAST ((HWND)0xffff), the message is sent to all top-level windows in the system, including disabled or invisible unowned windows, overlapped windows, and pop-up windows; but the message is not sent to child windows.
            Message sending is subject to UIPI. The thread of a process can send messages only to message queues of threads in processes of lesser or equal integrity level.
            </param>
            <param name = "wMsg">
            The message to be sent.
            For lists of the system-provided messages, see <see cref = "T:PInvoke.User32.WindowMessage"/>.
            </param>
            <param name = "wParam">Additional message-specific information.</param>
            <param name = "lParam">Additional message-specific information.</param>
            <returns>The return value specifies the result of the message processing; it depends on the message sent.</returns>
        </member>
        <member name="M:PInvoke.User32.PostMessage(System.IntPtr,PInvoke.User32.WindowMessage,System.IntPtr,System.IntPtr)">
            <summary>
            Places (posts) a message in the message queue associated with the thread that created the specified window and returns without waiting for the thread to process the message.
            To post a message in the message queue associated with a thread, use the PostThreadMessage function.
            </summary>
            <param name = "hWnd">
            A handle to the window whose window procedure is to receive the message.
            </param>
            <param name = "wMsg">
            The message to be posted.
            For lists of the system-provided messages, see <see cref = "T:PInvoke.User32.WindowMessage"/>.
            </param>
            <param name = "wParam">Additional message-specific information.</param>
            <param name = "lParam">Additional message-specific information.</param>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError. GetLastError returns ERROR_NOT_ENOUGH_QUOTA when the limit is hit.
            </returns>
        </member>
        <member name="M:PInvoke.User32.LookupIconIdFromDirectory(System.IntPtr,System.Boolean)">
            <summary>
            Searches through icon or cursor data for the icon or cursor that best fits the current display device.
            To specify a desired height or width, use the LookupIconIdFromDirectoryEx function.
            </summary>
            <param name = "presbits">
            The icon or cursor directory data. Because this function does not validate the resource data, it causes a general protection (GP) fault or returns an undefined value if <paramref name = "presbits"/> is not pointing to valid resource data.
            </param>
            <param name = "fIcon">
            Indicates whether an icon or a cursor is sought. If this parameter is TRUE, the function is searching for an icon; if the parameter is FALSE, the function is searching for a cursor.
            </param>
            <returns>
            If the function succeeds, the return value is an integer resource identifier for the icon or cursor that best fits the current display device.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
        </member>
        <member name="M:PInvoke.User32.LookupIconIdFromDirectory(System.Byte[],System.Boolean)">
            <summary>
            Searches through icon or cursor data for the icon or cursor that best fits the current display device.
            To specify a desired height or width, use the LookupIconIdFromDirectoryEx function.
            </summary>
            <param name = "presbits">
            The icon or cursor directory data. Because this function does not validate the resource data, it causes a general protection (GP) fault or returns an undefined value if <paramref name = "presbits"/> is not pointing to valid resource data.
            </param>
            <param name = "fIcon">
            Indicates whether an icon or a cursor is sought. If this parameter is TRUE, the function is searching for an icon; if the parameter is FALSE, the function is searching for a cursor.
            </param>
            <returns>
            If the function succeeds, the return value is an integer resource identifier for the icon or cursor that best fits the current display device.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
        </member>
        <member name="M:PInvoke.User32.LookupIconIdFromDirectoryEx(System.IntPtr,System.Boolean,System.Int32,System.Int32,PInvoke.User32.LookupIconIdFromDirectoryExFlags)">
            <summary>
            Searches through icon or cursor data for the icon or cursor that best fits the current display device.
            To specify a desired height or width, use the LookupIconIdFromDirectoryEx function.
            </summary>
            <param name = "presbits">
            The icon or cursor directory data. Because this function does not validate the resource data, it causes a general protection (GP) fault or returns an undefined value if <paramref name = "presbits"/> is not pointing to valid resource data.
            </param>
            <param name = "fIcon">
            Indicates whether an icon or a cursor is sought. If this parameter is TRUE, the function is searching for an icon; if the parameter is FALSE, the function is searching for a cursor.
            </param>
            <param name = "cxDesired">The desired width, in pixels, of the icon. If this parameter is zero, the function uses the SM_CXICON or SM_CXCURSOR system metric value.</param>
            <param name = "cyDesired">The desired height, in pixels, of the icon. If this parameter is zero, the function uses the SM_CYICON or SM_CYCURSOR system metric value.</param>
            <param name = "Flags">A combination of the following values.</param>
            <returns>
            If the function succeeds, the return value is an integer resource identifier for the icon or cursor that best fits the current display device.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
        </member>
        <member name="M:PInvoke.User32.LookupIconIdFromDirectoryEx(System.Byte[],System.Boolean,System.Int32,System.Int32,PInvoke.User32.LookupIconIdFromDirectoryExFlags)">
            <summary>
            Searches through icon or cursor data for the icon or cursor that best fits the current display device.
            To specify a desired height or width, use the LookupIconIdFromDirectoryEx function.
            </summary>
            <param name = "presbits">
            The icon or cursor directory data. Because this function does not validate the resource data, it causes a general protection (GP) fault or returns an undefined value if <paramref name = "presbits"/> is not pointing to valid resource data.
            </param>
            <param name = "fIcon">
            Indicates whether an icon or a cursor is sought. If this parameter is TRUE, the function is searching for an icon; if the parameter is FALSE, the function is searching for a cursor.
            </param>
            <param name = "cxDesired">The desired width, in pixels, of the icon. If this parameter is zero, the function uses the SM_CXICON or SM_CXCURSOR system metric value.</param>
            <param name = "cyDesired">The desired height, in pixels, of the icon. If this parameter is zero, the function uses the SM_CYICON or SM_CYCURSOR system metric value.</param>
            <param name = "Flags">A combination of the following values.</param>
            <returns>
            If the function succeeds, the return value is an integer resource identifier for the icon or cursor that best fits the current display device.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
        </member>
        <member name="M:PInvoke.User32.GetClipboardFormatName(System.Int32,System.IntPtr,System.Int32)">
            <summary>
            Retrieves the name of the format from the clipboard.
            </summary>
            <param name = "format">The type of format to be retrieved. This parameter must not specify any of the predefined clipboard formats.</param>
            <param name = "lpszFormatName">The format name string.</param>
            <param name = "nMaxCount">
            The length of the <paramref name = "lpszFormatName"/> buffer, in characters. The buffer must be large enough to include the terminating null character; otherwise, the format name string is truncated to <paramref name = "nMaxCount"/>-1 characters.
            </param>
            <returns>
            If the function succeeds, the return value is the number of characters copied to the buffer.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
        </member>
        <member name="M:PInvoke.User32.GetClipboardFormatName(System.Int32,System.Char[],System.Int32)">
            <summary>
            Retrieves the name of the format from the clipboard.
            </summary>
            <param name = "format">The type of format to be retrieved. This parameter must not specify any of the predefined clipboard formats.</param>
            <param name = "lpszFormatName">The format name string.</param>
            <param name = "nMaxCount">
            The length of the <paramref name = "lpszFormatName"/> buffer, in characters. The buffer must be large enough to include the terminating null character; otherwise, the format name string is truncated to <paramref name = "nMaxCount"/>-1 characters.
            </param>
            <returns>
            If the function succeeds, the return value is the number of characters copied to the buffer.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
        </member>
        <member name="M:PInvoke.User32.SendInput(System.Int32,System.IntPtr,System.Int32)">
            <summary>
            Synthesizes keystrokes, mouse motions, and button clicks.
            </summary>
            <param name = "nInputs">The number of structures in the <paramref name = "pInputs"/> array.</param>
            <param name = "pInputs">An array of  structures. Each structure represents an event to be inserted into the keyboard or mouse input stream.</param>
            <param name = "cbSize">The size, in bytes, of an <see cref = "T:PInvoke.User32.INPUT"/> structure. If cbSize is not the size of an <see cref = "T:PInvoke.User32.INPUT"/> structure, the function fails.</param>
            <returns>
            The function returns the number of events that it successfully inserted into the keyboard or mouse input stream.
            If the function returns zero, the input was already blocked by another thread. To get extended error information, call GetLastError.
            </returns>
            <remarks>
            This function is subject to UIPI. Applications are permitted to inject input only into applications that are at an equal or lesser integrity level.
            This function fails when it is blocked by UIPI. Note that neither GetLastError nor the return value will indicate the failure was caused by UIPI blocking.
            </remarks>
        </member>
        <member name="M:PInvoke.User32.SendInput(System.Int32,PInvoke.User32.INPUT[],System.Int32)">
            <summary>
            Synthesizes keystrokes, mouse motions, and button clicks.
            </summary>
            <param name = "nInputs">The number of structures in the <paramref name = "pInputs"/> array.</param>
            <param name = "pInputs">An array of  structures. Each structure represents an event to be inserted into the keyboard or mouse input stream.</param>
            <param name = "cbSize">The size, in bytes, of an <see cref = "T:PInvoke.User32.INPUT"/> structure. If cbSize is not the size of an <see cref = "T:PInvoke.User32.INPUT"/> structure, the function fails.</param>
            <returns>
            The function returns the number of events that it successfully inserted into the keyboard or mouse input stream.
            If the function returns zero, the input was already blocked by another thread. To get extended error information, call GetLastError.
            </returns>
            <remarks>
            This function is subject to UIPI. Applications are permitted to inject input only into applications that are at an equal or lesser integrity level.
            This function fails when it is blocked by UIPI. Note that neither GetLastError nor the return value will indicate the failure was caused by UIPI blocking.
            </remarks>
        </member>
    </members>
</doc>
